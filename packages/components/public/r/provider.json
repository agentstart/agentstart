{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "provider",
  "type": "registry:component",
  "title": "AgentStart Provider",
  "description": "React context provider for sharing the AgentStart client instance across components. Eliminates prop drilling and provides hooks for accessing the client.",
  "dependencies": [
    "agentstart",
    "react"
  ],
  "files": [
    {
      "path": "src/registry/agentstart/provider.tsx",
      "content": "/* agent-frontmatter:start\nAGENT: AgentStart provider\nPURPOSE: Supply the shared AgentStart client instance through React context\nUSAGE: <AgentStartProvider client={client}>{children}</AgentStartProvider>\nEXPORTS: AgentStartProvider, AgentStartProviderProps, useAgentStartClient, useOptionalAgentStartClient\nFEATURES:\n  - Shares the thread-capable AgentStart client with all descendant components\n  - Provides safe and optional hooks for consuming the client instance\n  - Eliminates prop drilling for sidebar and tool-aware components\nSEARCHABLE: agent layout, agentstart provider, agent context\nagent-frontmatter:end */\n\n\"use client\";\n\nimport type { AgentStartAPI } from \"agentstart/api\";\nimport { createContext, type ReactNode, useContext, useMemo } from \"react\";\n\ninterface AgentStartClientContextState {\n  client: AgentStartAPI;\n}\nconst AgentStartClientContext =\n  createContext<AgentStartClientContextState | null>(null);\n\nexport type AgentStartProviderProps = {\n  client: AgentStartAPI;\n  children: ReactNode;\n};\n\nexport function AgentStartProvider({\n  client,\n  children,\n}: AgentStartProviderProps) {\n  const state = useMemo(() => ({ client }), [client]);\n\n  return (\n    <AgentStartClientContext.Provider value={state}>\n      {children}\n    </AgentStartClientContext.Provider>\n  );\n}\n\nexport function useAgentStartContext(): AgentStartClientContextState {\n  const context = useContext(AgentStartClientContext);\n  if (!context) {\n    throw new Error(\n      \"AgentStart client not found. Wrap your component tree with <AgentStartProvider> or pass a client prop directly.\",\n    );\n  }\n  return context;\n}\n",
      "type": "registry:component",
      "target": "components/agent/provider.tsx"
    }
  ]
}
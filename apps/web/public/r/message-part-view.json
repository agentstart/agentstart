{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "message-part-view",
  "type": "registry:component",
  "title": "AgentStart Message Part View",
  "description": "Route different tool and content types to their specific UI components. Dispatches tool parts to specialized renderers for bash, read, write, and other tools.",
  "dependencies": [
    "@phosphor-icons/react",
    "agentstart",
    "react"
  ],
  "registryDependencies": [],
  "files": [
    {
      "path": "src/registry/agentstart/tools/message-part-view.tsx",
      "content": "/* agent-frontmatter:start\nAGENT: Message part view orchestrator\nPURPOSE: Route different tool and content types to their specific UI components\nUSAGE: <MessagePart part={part} isStreaming={isStreaming} />\nEXPORTS: MessagePart\nFEATURES:\n  - Dispatches tool parts to specialized renderers (bash, read, write, etc.)\n  - Renders text content with markdown support\n  - Handles reasoning blocks with collapsible UI\n  - Supports all AgentStart tool visualizations\nSEARCHABLE: message view, tool renderer, part dispatcher, ui orchestrator\nagent-frontmatter:end */\n\nimport { BrainIcon } from \"@phosphor-icons/react\";\nimport type { AgentStartMessagePart } from \"agentstart/agent\";\nimport { memo } from \"react\";\nimport {\n  Reasoning as BaseReasoning,\n  ReasoningContent,\n  ReasoningTrigger,\n} from \"../reasoning\";\nimport { Response } from \"../response\";\nimport { Shimmer } from \"../shimmer\";\nimport { Bash } from \"./bash\";\nimport { EditFile } from \"./edit\";\nimport { Glob } from \"./glob\";\nimport { Grep } from \"./grep\";\nimport { Ls } from \"./ls\";\nimport { ReadFile } from \"./read\";\nimport { Todo } from \"./todo\";\nimport { WriteFile } from \"./write\";\n\ninterface Props {\n  part: AgentStartMessagePart;\n  isStreaming: boolean;\n}\n\nexport const MessagePart = memo(function MessagePart({\n  part,\n  isStreaming,\n}: Props) {\n  switch (part.type) {\n    case \"tool-read\": {\n      return <ReadFile part={part} />;\n    }\n    case \"tool-write\":\n      return <WriteFile part={part} />;\n    case \"tool-edit\":\n      return <EditFile part={part} />;\n    case \"tool-bash\":\n      return <Bash part={part} />;\n    case \"tool-glob\":\n      return <Glob part={part} />;\n    case \"tool-grep\":\n      return <Grep part={part} />;\n    case \"tool-ls\":\n      return <Ls part={part} />;\n    case \"tool-todoRead\":\n    case \"tool-todoWrite\":\n      return <Todo part={part} />;\n\n    case \"reasoning\":\n      return (\n        <Reasoning\n          className=\"w-full\"\n          isStreaming={isStreaming}\n          text={part.text}\n        />\n      );\n    case \"text\":\n      return <Response>{part.text}</Response>;\n    default:\n      return null;\n  }\n});\n\nfunction Reasoning({\n  className,\n  text,\n  isStreaming,\n}: {\n  className?: string;\n  text: string;\n  isStreaming: boolean;\n}) {\n  const getThinkingMessage = (isStreaming: boolean, duration?: number) => {\n    if (isStreaming || duration === 0) {\n      return <Shimmer duration={1}>Thinking...</Shimmer>;\n    }\n    return duration === undefined ? (\n      <p>Thought for a few seconds</p>\n    ) : (\n      <p>Thought for {duration} seconds</p>\n    );\n  };\n\n  return (\n    <BaseReasoning\n      className={className}\n      isStreaming={isStreaming}\n      defaultOpen={false}\n    >\n      <ReasoningTrigger>\n        <BrainIcon className=\"size-4\" weight=\"duotone\" />\n        {getThinkingMessage(isStreaming)}\n      </ReasoningTrigger>\n      <ReasoningContent>{text}</ReasoningContent>\n    </BaseReasoning>\n  );\n}\n",
      "type": "registry:component",
      "target": "components/agent/tools/message-part-view.tsx"
    },
    {
      "path": "src/registry/agentstart/tools/bash.tsx",
      "content": "/* agent-frontmatter:start\nAGENT: Bash tool UI component\nPURPOSE: Display shell command execution results with stdout/stderr output\nUSAGE: <Bash part={toolPart} />\nEXPORTS: Bash, BashProps\nFEATURES:\n  - Shows executed command with description\n  - Renders stdout and stderr with syntax highlighting\n  - Displays execution duration and exit code\n  - Distinguishes between success and error states\nSEARCHABLE: bash tool, shell command ui, terminal output view\nagent-frontmatter:end */\n\nimport { ClockIcon } from \"@phosphor-icons/react\";\nimport type { Tools } from \"agentstart/agent\";\nimport type { InferUITools, ToolUIPart } from \"ai\";\nimport { CodeBlock } from \"../code-block\";\nimport { Tool, ToolContent, ToolHeader, ToolOutput } from \"./tool\";\n\nexport interface BashProps {\n  part: ToolUIPart<InferUITools<Pick<Tools, \"bash\">>>;\n}\n\nexport function Bash({\n  part: { type, state, input, output, errorText },\n}: BashProps) {\n  const hasOutput = output?.metadata?.stdout || output?.metadata?.stderr;\n\n  const formatDuration = (ms?: number) => {\n    if (!ms) return \"\";\n    return ms < 1000 ? `${ms}ms` : `${(ms / 1000).toFixed(2)}s`;\n  };\n\n  const renderOutput = () => (\n    <div className=\"flex flex-col gap-2\">\n      {/* Command and description */}\n      <div className=\"flex flex-col gap-1\">\n        <div className=\"rounded bg-muted/50 p-2 font-mono text-xs\">\n          $ {input?.command}\n        </div>\n        {input?.description && (\n          <span className=\"text-muted-foreground text-xs\">\n            {input.description}\n          </span>\n        )}\n      </div>\n\n      {/* Status indicators */}\n      {[\"input-streaming\", \"input-available\"].includes(state) && (\n        <div className=\"flex items-center gap-2 text-muted-foreground text-xs\">\n          <ClockIcon weight=\"duotone\" className=\"size-4 animate-spin\" />\n          <span>Executing command...</span>\n        </div>\n      )}\n\n      {/* Exit code and duration */}\n      {state === \"output-available\" && output && (\n        <div className=\"flex items-center gap-4 text-muted-foreground text-xs\">\n          {output.metadata?.exitCode !== undefined && (\n            <span\n              className={\n                output.metadata.exitCode === 0 ? undefined : \"text-yellow-600\"\n              }\n            >\n              Exit code: {output.metadata.exitCode}\n            </span>\n          )}\n          {output.metadata?.duration && (\n            <span>Duration: {formatDuration(output.metadata.duration)}</span>\n          )}\n          {/* {output.metadata?.commitHash && (\n            <CommitHash hash={output.metadata.commitHash} />\n          )} */}\n        </div>\n      )}\n\n      {/* Standard output */}\n      {output?.metadata?.stdout && (\n        <div className=\"mt-2\">\n          <span className=\"mb-1 block text-muted-foreground text-xs\">\n            Output:\n          </span>\n          <CodeBlock\n            code={output.metadata.stdout}\n            language=\"bash\"\n            className=\"max-h-[400px] overflow-auto text-xs\"\n          />\n        </div>\n      )}\n\n      {/* Standard error */}\n      {output?.metadata?.stderr && (\n        <div className=\"mt-2\">\n          <span className=\"mb-1 block text-red-600 text-xs\">Error output:</span>\n          <CodeBlock\n            code={output.metadata.stderr}\n            language=\"bash\"\n            className=\"max-h-[200px] overflow-auto border-red-200 text-xs dark:border-red-900\"\n          />\n        </div>\n      )}\n\n      {/* No output message */}\n      {state === \"output-available\" && output && !hasOutput && (\n        <span className=\"text-muted-foreground text-xs italic\">\n          Command executed successfully (no output)\n        </span>\n      )}\n    </div>\n  );\n\n  return (\n    <Tool>\n      <ToolHeader type={type} state={state} />\n      <ToolContent>\n        <ToolOutput output={renderOutput()} errorText={errorText} />\n      </ToolContent>\n    </Tool>\n  );\n}\n",
      "type": "registry:component",
      "target": "components/agent/tools/bash.tsx"
    },
    {
      "path": "src/registry/agentstart/tools/glob.tsx",
      "content": "/* agent-frontmatter:start\nAGENT: Glob tool UI component\nPURPOSE: Display file pattern matching results from glob tool\nUSAGE: <Glob part={toolPart} />\nEXPORTS: Glob, GlobProps\nFEATURES:\n  - Renders matched file and directory paths\n  - Color-coded icons for files vs directories\n  - Shows pattern used and match count\n  - Highlights filename vs directory path distinction\nSEARCHABLE: glob tool, file pattern match ui, file search results\nagent-frontmatter:end */\n\nimport { FileIcon, FolderIcon } from \"@phosphor-icons/react\";\nimport type { Tools } from \"agentstart/agent\";\nimport type { InferUITools, ToolUIPart } from \"ai\";\nimport { Tool, ToolContent, ToolHeader, ToolOutput } from \"./tool\";\n\nexport interface GlobProps {\n  part: ToolUIPart<InferUITools<Pick<Tools, \"glob\">>>;\n}\n\nexport function Glob({\n  part: { type, state, input, output, errorText },\n}: GlobProps) {\n  const renderMatch = (match: string) => {\n    const isDirectory = match.endsWith(\"/\");\n    const cleanPath = isDirectory ? match.slice(0, -1) : match;\n    const parts = cleanPath.split(\"/\");\n    const fileName = parts[parts.length - 1];\n    const dirPath = parts.slice(0, -1).join(\"/\");\n\n    return (\n      <div className=\"flex items-center gap-2 py-0.5 text-xs\">\n        {isDirectory ? (\n          <FolderIcon className=\"size-4\" weight=\"duotone\" />\n        ) : (\n          <FileIcon className=\"size-4\" weight=\"duotone\" />\n        )}\n        <span>\n          {dirPath && <span className=\"text-muted-foreground\">{dirPath}/</span>}\n          <span className=\"font-medium\">{fileName}</span>\n        </span>\n      </div>\n    );\n  };\n\n  const renderResults = () => {\n    if (!Array.isArray(output?.metadata?.matches)) return null;\n\n    const matches = output.metadata.matches as string[];\n    const totalMatches =\n      typeof output.metadata?.count === \"number\"\n        ? output.metadata.count\n        : matches.length;\n\n    return (\n      <div className=\"flex flex-col gap-2\">\n        {/* Pattern and path */}\n        <div className=\"flex flex-col gap-1\">\n          <div className=\"text-xs\">\n            <span className=\"text-muted-foreground\">Pattern: </span>\n            <code className=\"rounded bg-muted/50 px-1 py-0.5 font-mono\">\n              {input?.pattern}\n            </code>\n          </div>\n          {input?.path && (\n            <div className=\"text-xs\">\n              <span className=\"text-muted-foreground\">In: </span>\n              <code className=\"font-mono\">{input.path}</code>\n            </div>\n          )}\n        </div>\n\n        {/* Results */}\n        <div className=\"mt-1\">\n          <div className=\"mb-1 text-muted-foreground text-xs\">\n            Found {totalMatches} match{totalMatches !== 1 ? \"es\" : \"\"}\n          </div>\n          {matches.length > 0 ? (\n            <div className=\"max-h-[300px] overflow-y-auto border-muted border-l-2 pl-2\">\n              {matches.slice(0, 100).map((match, index) => (\n                <div key={`${match}-${index}`}>{renderMatch(match)}</div>\n              ))}\n              {matches.length > 100 && (\n                <div className=\"mt-2 text-muted-foreground text-xs\">\n                  ... and {matches.length - 100} more\n                </div>\n              )}\n            </div>\n          ) : (\n            <span className=\"text-muted-foreground text-xs italic\">\n              No files found matching this pattern\n            </span>\n          )}\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <Tool>\n      <ToolHeader type={type} state={state} />\n      <ToolContent>\n        <ToolOutput output={renderResults()} errorText={errorText} />\n      </ToolContent>\n    </Tool>\n  );\n}\n",
      "type": "registry:component",
      "target": "components/agent/tools/glob.tsx"
    },
    {
      "path": "src/registry/agentstart/tools/grep.tsx",
      "content": "/* agent-frontmatter:start\nAGENT: Grep tool UI component\nPURPOSE: Display code search results from grep tool with syntax highlighting\nUSAGE: <Grep part={toolPart} />\nEXPORTS: Grep, GrepProps\nFEATURES:\n  - Shows search pattern and matched content\n  - Supports multiple output modes (content/files/count)\n  - Syntax highlighting for matched code lines\n  - Displays file paths and line numbers with matches\nSEARCHABLE: grep tool, code search ui, content search results\nagent-frontmatter:end */\n\nimport { FileIcon, HashIcon } from \"@phosphor-icons/react\";\nimport type { Tools } from \"agentstart/agent\";\nimport type { InferUITools, ToolUIPart } from \"ai\";\nimport { CodeBlock } from \"../code-block\";\nimport { Tool, ToolContent, ToolHeader, ToolOutput } from \"./tool\";\n\nexport interface GrepProps {\n  part: ToolUIPart<InferUITools<Pick<Tools, \"grep\">>>;\n}\n\nexport function Grep({\n  part: { type, state, input, output, errorText },\n}: GrepProps) {\n  const getOutputModeLabel = () => {\n    switch (input?.outputMode) {\n      case \"content\":\n        return \"Matching Lines\";\n      case \"count\":\n        return \"Match Counts\";\n      // case \"files_with_matches\":\n      default:\n        return \"Matching Files\";\n    }\n  };\n\n  const renderFilesOutput = () => {\n    const files = Array.isArray(output?.metadata?.files)\n      ? (output.metadata.files as string[])\n      : [];\n    if (files.length === 0) {\n      return (\n        <span className=\"text-muted-foreground text-xs italic\">\n          No files found with matches\n        </span>\n      );\n    }\n\n    return (\n      <div className=\"mt-2\">\n        <div className=\"mb-1 text-muted-foreground text-xs\">\n          Found in {output?.metadata?.fileCount ?? files.length} file\n          {(output?.metadata?.fileCount ?? files.length) !== 1 && \"s\"}\n        </div>\n        <div className=\"max-h-[300px] overflow-y-auto border-muted border-l-2 pl-2\">\n          {files.slice(0, 100).map((file, index) => (\n            <div\n              key={`${file}-${index}`}\n              className=\"flex items-center gap-2 py-0.5 text-xs\"\n            >\n              <FileIcon className=\"size-4\" weight=\"duotone\" />\n              <span className=\"font-mono\">{file}</span>\n            </div>\n          ))}\n          {files.length > 100 && (\n            <div className=\"mt-2 text-muted-foreground text-xs\">\n              ... and {files.length - 100} more\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  };\n\n  const renderCountsOutput = () => {\n    const counts = Array.isArray(output?.metadata?.counts)\n      ? (output.metadata.counts as Array<{ filename: string; count: number }>)\n      : [];\n    if (counts.length === 0) {\n      return (\n        <span className=\"text-muted-foreground text-xs italic\">\n          No matches found\n        </span>\n      );\n    }\n\n    return (\n      <div className=\"mt-2\">\n        <div className=\"mb-1 text-muted-foreground text-xs\">\n          Total: {output?.metadata?.totalMatches || 0} match\n          {(output?.metadata?.totalMatches || 0) !== 1 && \"es\"} in{\" \"}\n          {counts.length} file{counts.length !== 1 && \"s\"}\n        </div>\n        <div className=\"max-h-[300px] space-y-0.5 overflow-y-auto font-mono text-xs\">\n          {counts.map((item, index) => (\n            <div\n              key={`${item.filename}-${index}`}\n              className=\"flex items-center gap-2 rounded px-1 py-0.5 hover:bg-muted/50\"\n            >\n              <HashIcon className=\"size-4\" weight=\"duotone\" />\n              <span className=\"w-12 text-right text-blue-600\">\n                {item.count}\n              </span>\n              <span>{item.filename}</span>\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  };\n\n  const renderContentOutput = () => {\n    const matches = Array.isArray(output?.metadata?.matches)\n      ? (output.metadata.matches as string[])\n      : [];\n    if (matches.length === 0) {\n      return (\n        <span className=\"text-muted-foreground text-xs italic\">\n          No matching lines found\n        </span>\n      );\n    }\n\n    // Join all matches into a single string for the code block\n    const content = matches.join(\"\\n\");\n\n    return (\n      <div className=\"mt-2\">\n        <div className=\"mb-1 text-muted-foreground text-xs\">\n          Found {output?.metadata?.matchCount || 0} match\n          {(output?.metadata?.matchCount || 0) !== 1 && \"es\"} in{\" \"}\n          {output?.metadata?.fileCount || 0} file\n          {(output?.metadata?.fileCount || 0) !== 1 && \"s\"}\n        </div>\n        <CodeBlock\n          code={content}\n          language=\"markdown\"\n          className=\"max-h-[400px] overflow-auto text-xs\"\n        />\n      </div>\n    );\n  };\n\n  const renderResults = () => {\n    if (!output) return null;\n\n    return (\n      <div className=\"flex flex-col gap-2\">\n        {/* Pattern and options */}\n        <div className=\"flex flex-col gap-1\">\n          <div className=\"text-xs\">\n            <span className=\"text-muted-foreground\">Pattern: </span>\n            <code className=\"rounded bg-muted/50 px-1 py-0.5 font-mono\">\n              {input?.pattern}\n            </code>\n          </div>\n          {input?.path && (\n            <div className=\"text-xs\">\n              <span className=\"text-muted-foreground\">In: </span>\n              <code className=\"font-mono\">{input.path}</code>\n            </div>\n          )}\n          {input?.outputMode && (\n            <div className=\"text-xs\">\n              <span className=\"text-muted-foreground\">Mode: </span>\n              <span>{getOutputModeLabel()}</span>\n            </div>\n          )}\n        </div>\n\n        {/* Results based on output mode */}\n        {input?.outputMode === \"files_with_matches\" || !input?.outputMode\n          ? renderFilesOutput()\n          : input?.outputMode === \"count\"\n            ? renderCountsOutput()\n            : renderContentOutput()}\n      </div>\n    );\n  };\n\n  return (\n    <Tool>\n      <ToolHeader type={type} state={state} />\n      <ToolContent>\n        <ToolOutput output={renderResults()} errorText={errorText} />\n      </ToolContent>\n    </Tool>\n  );\n}\n",
      "type": "registry:component",
      "target": "components/agent/tools/grep.tsx"
    },
    {
      "path": "src/registry/agentstart/tools/ls.tsx",
      "content": "/* agent-frontmatter:start\nAGENT: Ls tool UI component\nPURPOSE: Display directory listings from the ls tool with file metadata\nUSAGE: <Ls part={toolPart} />\nEXPORTS: Ls, LsProps\nFEATURES:\n  - Renders file/directory/symlink entries with appropriate icons\n  - Shows file sizes and modification dates\n  - Distinguishes file types with color-coded icons\n  - Displays tool execution state (pending/success/error)\nSEARCHABLE: ls tool, directory listing, file browser ui\nagent-frontmatter:end */\n\nimport { formatDate, formatSize } from \"@agentstart/utils\";\nimport { FileIcon, FolderIcon, LinkIcon } from \"@phosphor-icons/react\";\nimport type { Tools } from \"agentstart/agent\";\nimport type { InferUITools, ToolUIPart } from \"ai\";\nimport { Tool, ToolContent, ToolHeader, ToolOutput } from \"./tool\";\n\nexport interface LsProps {\n  part: ToolUIPart<InferUITools<Pick<Tools, \"ls\">>>;\n}\n\nexport function Ls({\n  part: { type, state, input, output, errorText },\n}: LsProps) {\n  const getIcon = (entryType: \"file\" | \"directory\" | \"symlink\") => {\n    switch (entryType) {\n      case \"directory\":\n        return <FolderIcon className=\"size-4\" weight=\"duotone\" />;\n      case \"symlink\":\n        return <LinkIcon className=\"size-4\" weight=\"duotone\" />;\n      default:\n        return <FileIcon className=\"size-4\" weight=\"duotone\" />;\n    }\n  };\n\n  const renderEntries = () => {\n    if (!Array.isArray(output?.metadata?.entries)) return null;\n    type LsEntry = {\n      type: \"file\" | \"directory\" | \"symlink\";\n      name: string;\n      size: number;\n      modifiedTime: number;\n    };\n    const entries = output.metadata.entries as LsEntry[];\n\n    return (\n      <div className=\"mt-1\">\n        <div className=\"mb-1 text-muted-foreground text-xs\">\n          {output.metadata?.count || 0} item\n          {(output.metadata?.count || 0) !== 1 && \"s\"}\n        </div>\n        {entries.length > 0 ? (\n          <div className=\"max-h-[400px] space-y-0.5 overflow-y-auto font-mono text-xs\">\n            {entries.map((entry, index) => (\n              <div\n                key={`${entry.name}-${index}`}\n                className=\"flex items-center gap-2 rounded px-1 py-0.5 hover:bg-muted/50\"\n              >\n                {getIcon(entry.type)}\n                <span className=\"w-12 text-right text-muted-foreground\">\n                  {entry.type === \"directory\" ? \"-\" : formatSize(entry.size)}\n                </span>\n                <span className=\"text-muted-foreground\">\n                  {formatDate(entry.modifiedTime)}\n                </span>\n                <span\n                  className={\n                    entry.type === \"directory\"\n                      ? \"font-medium text-blue-600\"\n                      : \"\"\n                  }\n                >\n                  {entry.name}\n                  {entry.type === \"directory\" && \"/\"}\n                  {entry.type === \"symlink\" && \" →\"}\n                </span>\n              </div>\n            ))}\n          </div>\n        ) : (\n          <span className=\"text-muted-foreground text-xs italic\">\n            Directory is empty\n          </span>\n        )}\n      </div>\n    );\n  };\n\n  return (\n    <Tool>\n      <ToolHeader type={type} state={state} />\n      <ToolContent>\n        <ToolOutput\n          output={\n            <div>\n              <div className=\"mb-2 text-xs\">\n                <span className=\"text-muted-foreground\">Directory: </span>\n                <code className=\"font-mono\">{input?.path || \"/\"}</code>\n              </div>\n              {renderEntries()}\n            </div>\n          }\n          errorText={errorText}\n        />\n      </ToolContent>\n    </Tool>\n  );\n}\n",
      "type": "registry:component",
      "target": "components/agent/tools/ls.tsx"
    },
    {
      "path": "src/registry/agentstart/tools/read.tsx",
      "content": "/* agent-frontmatter:start\nAGENT: Read file tool UI component\nPURPOSE: Display file reading operations with syntax-highlighted content\nUSAGE: <ReadFile part={toolPart} />\nEXPORTS: ReadFile, ReadFileProps\nFEATURES:\n  - Shows file path and reading range (offset/limit)\n  - Syntax highlighting based on file extension\n  - Displays file content with line numbers\n  - Handles partial file reads with range indicators\nSEARCHABLE: read tool, file view ui, code viewer\nagent-frontmatter:end */\n\nimport { getLanguageFromFilePath } from \"@agentstart/utils\";\nimport { EyeIcon } from \"@phosphor-icons/react\";\nimport type { Tools } from \"agentstart/agent\";\nimport type { InferUITools, ToolUIPart } from \"ai\";\nimport { useMemo } from \"react\";\nimport { CodeBlock } from \"../code-block\";\nimport { Tool, ToolContent, ToolHeader, ToolOutput } from \"./tool\";\n\nexport interface ReadFileProps {\n  part: ToolUIPart<InferUITools<Pick<Tools, \"read\">>>;\n}\n\nexport function ReadFile({\n  part: { type, state, input, output, errorText },\n}: ReadFileProps) {\n  const fileName = input?.filePath?.split(\"/\").pop() || input?.filePath;\n\n  const readingRange = useMemo(() => {\n    if (input?.offset === undefined && input?.limit === undefined) {\n      return null;\n    }\n    const start = input.offset ?? 0;\n    const end = input.limit ? start + input.limit : \"end\";\n    return `Lines ${start + 1} - ${end}`;\n  }, [input]);\n\n  const previewContent = () => {\n    if (!output?.metadata?.content) return null;\n    const lines = output.metadata.content.split(\"\\n\");\n    const maxLines = 10;\n    const preview = lines.slice(0, maxLines).join(\"\\n\");\n    const hasMore = lines.length > maxLines;\n    const language = getLanguageFromFilePath(input.filePath);\n\n    return (\n      <div className=\"mt-2\">\n        <CodeBlock\n          code={preview}\n          language={language}\n          className=\"max-h-[300px] overflow-auto p-0 text-xs\"\n        />\n        {hasMore && (\n          <span className=\"mt-1 block text-muted-foreground text-xs\">\n            ... and {lines.length - maxLines} more lines\n          </span>\n        )}\n      </div>\n    );\n  };\n\n  return (\n    <Tool>\n      <ToolHeader type={type} state={state} />\n      <ToolContent>\n        <ToolOutput\n          output={\n            <div className=\"flex flex-col\">\n              <div className=\"flex items-center gap-2\">\n                <EyeIcon className=\"size-4\" weight=\"duotone\" />\n                <code className=\"text-xs\">{fileName}</code>\n                {readingRange && (\n                  <span className=\"text-muted-foreground text-xs\">\n                    ({readingRange})\n                  </span>\n                )}\n              </div>\n              {previewContent()}\n            </div>\n          }\n          errorText={errorText}\n        />\n      </ToolContent>\n    </Tool>\n  );\n}\n",
      "type": "registry:component",
      "target": "components/agent/tools/read.tsx"
    },
    {
      "path": "src/registry/agentstart/tools/todo.tsx",
      "content": "/* agent-frontmatter:start\nAGENT: Todo tool UI component\nPURPOSE: Display task list from todo tool with status indicators\nUSAGE: <Todo part={toolPart} />\nEXPORTS: Todo, TodoProps\nFEATURES:\n  - Shows todos grouped by status (inProgress, pending, completed)\n  - Color-coded status icons (blue pulse, gray circle, green check)\n  - Displays active/pending forms for each task\n  - Error state visualization for failed operations\nSEARCHABLE: todo tool, task list ui, progress tracker\nagent-frontmatter:end */\n\nimport {\n  CheckIcon,\n  CircleIcon,\n  ClockIcon,\n  WarningIcon,\n} from \"@phosphor-icons/react\";\nimport type { Tools } from \"agentstart/agent\";\nimport type { InferUITools, ToolUIPart } from \"ai\";\nimport type React from \"react\";\nimport { cn } from \"@/lib/utils\";\nimport { Tool, ToolContent, ToolHeader, ToolOutput } from \"./tool\";\n\nconst statusOrder = [\"inProgress\", \"pending\", \"completed\"];\n\nconst statusIcons: Record<string, React.ReactNode> = {\n  completed: <CheckIcon className=\"size-3.5 text-green-600\" />,\n  inProgress: <ClockIcon className=\"size-3.5 animate-pulse text-blue-600\" />,\n  pending: <CircleIcon className=\"size-3.5 text-muted-foreground\" />,\n};\n\nconst getStatusIcon = (status: string) => statusIcons[status] ?? null;\n\nconst priorityColors: Record<string, string> = {\n  high: \"text-red-600\",\n  medium: \"text-yellow-600\",\n  low: \"text-muted-foreground\",\n};\n\nconst getPriorityColor = (priority: string) =>\n  priorityColors[priority] ?? \"text-muted-foreground\";\n\nconst priorityBadges: Record<string, string> = {\n  high: \"⚡\",\n  medium: \"•\",\n  low: \"○\",\n};\n\nconst getPriorityBadge = (priority: string) => (\n  <span className={cn(\"text-xs\", getPriorityColor(priority))}>\n    {priorityBadges[priority] ?? \"\"}\n  </span>\n);\n\nexport interface TodoProps {\n  part:\n    | ToolUIPart<InferUITools<Pick<Tools, \"todoRead\">>>\n    | ToolUIPart<InferUITools<Pick<Tools, \"todoWrite\">>>;\n}\n\nexport function Todo({ part: { type, state, output, errorText } }: TodoProps) {\n  if (!output) {\n    return (\n      <Tool>\n        <ToolHeader type={type} state={state} />\n        <ToolContent>\n          <ToolOutput output={null} errorText={errorText} />\n        </ToolContent>\n      </Tool>\n    );\n  }\n\n  const todos = output.metadata?.todos || [];\n\n  const groupedTodos = todos.reduce(\n    (acc, todo) => {\n      if (!acc[todo.status]) {\n        acc[todo.status] = [];\n      }\n      acc[todo.status]!.push(todo);\n      return acc;\n    },\n    {} as Record<string, typeof todos>,\n  );\n\n  const todoListContent = errorText ? (\n    <div className=\"flex items-center gap-2 text-red-600\">\n      <WarningIcon className=\"size-4\" weight=\"duotone\" />\n      <span className=\"text-xs\">{errorText}</span>\n    </div>\n  ) : (\n    <>\n      {/* Todo Items */}\n      <div className=\"space-y-3\">\n        {statusOrder.map((status) => {\n          const statusTodos = groupedTodos[status];\n          if (!statusTodos || statusTodos.length === 0) return null;\n\n          return (\n            <div key={status}>\n              <div className=\"mb-1 font-medium text-muted-foreground text-xs capitalize\">\n                {status.replace(\"_\", \" \")}\n              </div>\n              <div className=\"space-y-1\">\n                {statusTodos.map((todo) => (\n                  <div\n                    key={todo.id}\n                    className={cn(\n                      \"flex items-start gap-2 rounded-sm p-1.5 text-xs transition-colors\",\n                      todo.status === \"completed\" && \"opacity-60\",\n                      todo.status === \"inProgress\" &&\n                        \"bg-blue-50 dark:bg-blue-900/20\",\n                      todo.priority === \"high\" &&\n                        todo.status !== \"completed\" &&\n                        \"bg-red-50 dark:bg-red-900/10\",\n                    )}\n                  >\n                    {getStatusIcon(todo.status)}\n                    <div className=\"flex-1\">\n                      <span\n                        className={cn(\n                          todo.status === \"completed\" && \"line-through\",\n                        )}\n                      >\n                        {todo.content}\n                      </span>\n                    </div>\n                    {getPriorityBadge(todo.priority)}\n                  </div>\n                ))}\n              </div>\n            </div>\n          );\n        })}\n      </div>\n\n      {todos.length === 0 && (\n        <div className=\"text-muted-foreground text-xs italic\">\n          No tasks in the list\n        </div>\n      )}\n    </>\n  );\n\n  return (\n    <Tool>\n      <ToolHeader type={type} state={state} />\n      <ToolContent>\n        <ToolOutput output={todoListContent} errorText={errorText} />\n      </ToolContent>\n    </Tool>\n  );\n}\n",
      "type": "registry:component",
      "target": "components/agent/tools/todo.tsx"
    },
    {
      "path": "src/registry/agentstart/tools/tool.tsx",
      "content": "/* agent-frontmatter:start\nAGENT: Tool UI primitives (Registry)\nPURPOSE: AgentStart registry version of tool UI components with collapsible state\nUSAGE: <Tool><ToolHeader /><ToolContent><ToolInput /><ToolOutput /></ToolContent></Tool>\nEXPORTS: Tool, ToolHeader, ToolContent, ToolInput, ToolOutput\nFEATURES:\n  - Collapsible tool execution container with state badges\n  - Displays tool parameters with JSON syntax highlighting\n  - Shows tool results or error messages with formatted output\n  - Status indicators for all tool execution states\n  - Uses Phosphor icons for consistent registry styling\nSEARCHABLE: tool ui registry, tool primitives, collapsible tool, tool execution ui\nagent-frontmatter:end */\n\n\"use client\";\n\nimport {\n  CaretDownIcon,\n  CheckCircleIcon,\n  CircleIcon,\n  ClockIcon,\n  WrenchIcon,\n  XCircleIcon,\n} from \"@phosphor-icons/react\";\nimport type { ToolUIPart } from \"ai\";\nimport type { ComponentProps, ReactNode } from \"react\";\nimport { isValidElement } from \"react\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Collapsible,\n  CollapsibleContent,\n  CollapsibleTrigger,\n} from \"@/components/ui/collapsible\";\nimport { cn } from \"@/lib/utils\";\nimport { CodeBlock } from \"../code-block\";\n\nexport type ToolProps = ComponentProps<typeof Collapsible>;\n\nexport const Tool = ({ className, ...props }: ToolProps) => (\n  <Collapsible\n    className={cn(\"not-prose mb-4 w-full rounded-md border\", className)}\n    {...props}\n  />\n);\n\nexport type ToolHeaderProps = {\n  title?: string;\n  type: ToolUIPart[\"type\"];\n  state: ToolUIPart[\"state\"];\n  className?: string;\n};\n\nconst getStatusBadge = (status: ToolUIPart[\"state\"]) => {\n  const labels = {\n    \"input-streaming\": \"Pending\",\n    \"input-available\": \"Running\",\n    \"approval-requested\": \"Approval Requested\",\n    \"approval-responded\": \"Approval Responded\",\n    \"output-available\": \"Completed\",\n    \"output-error\": \"Error\",\n    \"output-denied\": \"Denied\",\n  } as const;\n\n  const icons = {\n    \"input-streaming\": <CircleIcon className=\"size-4\" weight=\"duotone\" />,\n    \"input-available\": (\n      <ClockIcon className=\"size-4 animate-pulse\" weight=\"duotone\" />\n    ),\n    \"approval-requested\": <ClockIcon className=\"size-4\" weight=\"duotone\" />,\n    \"approval-responded\": (\n      <CheckCircleIcon className=\"size-4\" weight=\"duotone\" />\n    ),\n    \"output-available\": (\n      <CheckCircleIcon className=\"size-4 text-green-600\" weight=\"duotone\" />\n    ),\n    \"output-error\": (\n      <XCircleIcon className=\"size-4 text-red-600\" weight=\"duotone\" />\n    ),\n    \"output-denied\": (\n      <XCircleIcon className=\"size-4 text-red-600\" weight=\"duotone\" />\n    ),\n  } as const;\n\n  return (\n    <Badge className=\"gap-1.5 rounded-full text-xs\" variant=\"secondary\">\n      {icons[status]}\n      {labels[status]}\n    </Badge>\n  );\n};\n\nexport const ToolHeader = ({\n  className,\n  title,\n  type,\n  state,\n  ...props\n}: ToolHeaderProps) => (\n  <CollapsibleTrigger\n    className={cn(\n      \"flex w-full items-center justify-between gap-4 p-3\",\n      className,\n    )}\n    {...props}\n  >\n    <div className=\"flex items-center gap-2\">\n      <WrenchIcon className=\"size-4 text-muted-foreground\" weight=\"duotone\" />\n      <span className=\"font-medium text-sm\">\n        {title ?? type.split(\"-\").slice(1).join(\"-\")}\n      </span>\n      {getStatusBadge(state)}\n    </div>\n    <CaretDownIcon\n      className=\"size-4 text-muted-foreground transition-transform group-data-[state=open]:rotate-180\"\n      weight=\"duotone\"\n    />\n  </CollapsibleTrigger>\n);\n\nexport type ToolContentProps = ComponentProps<typeof CollapsibleContent>;\n\nexport const ToolContent = ({ className, ...props }: ToolContentProps) => (\n  <CollapsibleContent\n    className={cn(\n      \"data-[state=closed]:fade-out-0 data-[state=closed]:slide-out-to-top-2 data-[state=open]:slide-in-from-top-2 text-popover-foreground outline-none data-[state=closed]:animate-out data-[state=open]:animate-in\",\n      className,\n    )}\n    {...props}\n  />\n);\n\nexport type ToolInputProps = ComponentProps<\"div\"> & {\n  input: ToolUIPart[\"input\"];\n};\n\nexport const ToolInput = ({ className, input, ...props }: ToolInputProps) => (\n  <div className={cn(\"space-y-2 overflow-hidden p-4\", className)} {...props}>\n    <h4 className=\"font-medium text-muted-foreground text-xs uppercase tracking-wide\">\n      Parameters\n    </h4>\n    <div className=\"rounded-md bg-muted/50\">\n      <CodeBlock code={JSON.stringify(input, null, 2)} language=\"json\" />\n    </div>\n  </div>\n);\n\nexport type ToolOutputProps = ComponentProps<\"div\"> & {\n  output: ToolUIPart[\"output\"];\n  errorText: ToolUIPart[\"errorText\"];\n};\n\nexport const ToolOutput = ({\n  className,\n  output,\n  errorText,\n  ...props\n}: ToolOutputProps) => {\n  if (!(output || errorText)) {\n    return null;\n  }\n\n  let Output = <div>{output as ReactNode}</div>;\n\n  if (typeof output === \"object\" && !isValidElement(output)) {\n    Output = (\n      <CodeBlock code={JSON.stringify(output, null, 2)} language=\"json\" />\n    );\n  } else if (typeof output === \"string\") {\n    Output = <CodeBlock code={output} language=\"json\" />;\n  }\n\n  return (\n    <div className={cn(\"space-y-2 p-4\", className)} {...props}>\n      <h4 className=\"font-medium text-muted-foreground text-xs uppercase tracking-wide\">\n        {errorText ? \"Error\" : \"Result\"}\n      </h4>\n      <div\n        className={cn(\n          \"overflow-x-auto rounded-md text-xs [&_table]:w-full\",\n          errorText\n            ? \"bg-destructive/10 text-destructive\"\n            : \"bg-muted/50 text-foreground\",\n        )}\n      >\n        {errorText && <div>{errorText}</div>}\n        {Output}\n      </div>\n    </div>\n  );\n};\n",
      "type": "registry:component",
      "target": "components/agent/tools/tool.tsx"
    },
    {
      "path": "src/registry/agentstart/tools/edit.tsx",
      "content": "/* agent-frontmatter:start\nAGENT: Edit file tool UI component\nPURPOSE: Visualize file edit operations with before/after code snippets\nUSAGE: <EditFile part={toolPart} />\nEXPORTS: EditFile, EditFileProps\nFEATURES:\n  - Shows old and new string replacements with syntax highlighting\n  - Displays file path and operation type (replace/replaceAll)\n  - Conditionally renders code blocks for multiline changes\n  - Supports replace_all flag visualization\nSEARCHABLE: edit tool, file edit ui, code replacement view\nagent-frontmatter:end */\n\nimport { getLanguageFromFilePath } from \"@agentstart/utils\";\nimport { SwapIcon } from \"@phosphor-icons/react\";\nimport type { Tools } from \"agentstart/agent\";\nimport type { InferUITools, ToolUIPart } from \"ai\";\nimport { CodeBlock } from \"../code-block\";\nimport { Tool, ToolContent, ToolHeader, ToolOutput } from \"./tool\";\n\nexport interface EditFileProps {\n  part: ToolUIPart<InferUITools<Pick<Tools, \"edit\">>>;\n}\n\nexport function EditFile({\n  part: { type, state, input, errorText },\n}: EditFileProps) {\n  const fileName = input?.filePath?.split(\"/\").pop() || input?.filePath;\n\n  const language = getLanguageFromFilePath(input?.filePath || \"\");\n\n  const shouldShowCodeBlock = (str: string | undefined) =>\n    Boolean(str && (str.includes(\"\\n\") || str.length > 50));\n\n  const renderChanges = () => {\n    if (!input) return null;\n\n    return (\n      <div className=\"space-y-3\">\n        {input.oldString && (\n          <div>\n            <span className=\"mb-1 block text-muted-foreground text-xs\">\n              Before:\n            </span>\n            {shouldShowCodeBlock(input.oldString) ? (\n              <CodeBlock\n                code={input.oldString}\n                language={language}\n                className=\"max-h-[150px] overflow-auto text-xs opacity-60\"\n              />\n            ) : (\n              <div className=\"rounded bg-muted/50 p-2 text-muted-foreground text-xs\">\n                <span className=\"line-through\">{input.oldString}</span>\n              </div>\n            )}\n          </div>\n        )}\n\n        {input.newString && (\n          <div>\n            <span className=\"mb-1 block text-green-600 text-xs\">After:</span>\n            {shouldShowCodeBlock(input.newString) ? (\n              <CodeBlock\n                code={input.newString}\n                language={language}\n                className=\"max-h-[150px] overflow-auto text-xs\"\n              />\n            ) : (\n              <div className=\"rounded bg-green-50 p-2 text-green-600 text-xs dark:bg-green-900/20\">\n                {input.newString}\n              </div>\n            )}\n          </div>\n        )}\n      </div>\n    );\n  };\n\n  return (\n    <Tool>\n      <ToolHeader type={type} state={state} />\n      <ToolContent>\n        <ToolOutput\n          output={\n            <div>\n              <div className=\"mb-2 flex items-center gap-2\">\n                <SwapIcon className=\"size-4\" weight=\"duotone\" />\n                <code className=\"text-xs\">{fileName}</code>\n                {input?.replaceAll && (\n                  <span className=\"text-muted-foreground text-xs\">\n                    (replace all)\n                  </span>\n                )}\n                {/* {state === \"output-available\" &&\n                  output?.metadata?.commitHash && (\n                    <CommitHash hash={output?.metadata?.commitHash} />\n                  )} */}\n              </div>\n              {renderChanges()}\n            </div>\n          }\n          errorText={errorText}\n        />\n      </ToolContent>\n    </Tool>\n  );\n}\n",
      "type": "registry:component",
      "target": "components/agent/tools/edit.tsx"
    },
    {
      "path": "src/registry/agentstart/tools/write.tsx",
      "content": "/* agent-frontmatter:start\nAGENT: Write file tool UI component\nPURPOSE: Display file writing operations with content preview\nUSAGE: <WriteFile part={toolPart} />\nEXPORTS: WriteFile, WriteFileProps\nFEATURES:\n  - Shows file path and write operation\n  - Preview first 10 lines of content with syntax highlighting\n  - Indicates when content is truncated\n  - Language detection based on file extension\nSEARCHABLE: write tool, file creation ui, save file view\nagent-frontmatter:end */\n\nimport { getLanguageFromFilePath } from \"@agentstart/utils\";\nimport { FileIcon } from \"@phosphor-icons/react\";\nimport type { Tools } from \"agentstart/agent\";\nimport type { InferUITools, ToolUIPart } from \"ai\";\nimport { CodeBlock } from \"../code-block\";\nimport { Tool, ToolContent, ToolHeader, ToolOutput } from \"./tool\";\n\nexport interface WriteFileProps {\n  part: ToolUIPart<InferUITools<Pick<Tools, \"write\">>>;\n}\n\nexport function WriteFile({\n  part: { type, state, input, errorText },\n}: WriteFileProps) {\n  const fileName = input?.filePath?.split(\"/\").pop() || input?.filePath;\n\n  const previewContent = () => {\n    if (!input?.content) return null;\n    const lines = input.content.split(\"\\n\");\n    const maxLines = 10;\n    const preview = lines.slice(0, maxLines).join(\"\\n\");\n    const hasMore = lines.length > maxLines;\n    const language = getLanguageFromFilePath(input.filePath);\n\n    return (\n      <div className=\"mt-2\">\n        <CodeBlock\n          code={preview}\n          language={language}\n          className=\"max-h-[200px] overflow-auto text-xs\"\n        />\n        {hasMore && (\n          <span className=\"mt-1 block text-muted-foreground text-xs\">\n            ... and {lines.length - maxLines} more lines\n          </span>\n        )}\n      </div>\n    );\n  };\n\n  return (\n    <Tool>\n      <ToolHeader type={type} state={state} />\n      <ToolContent>\n        <ToolOutput\n          output={\n            <div>\n              <div className=\"mb-2 flex items-center gap-2\">\n                <FileIcon className=\"size-4\" weight=\"duotone\" />\n                <code className=\"text-xs\">{fileName}</code>\n                {/* {state === \"output-available\" &&\n                  output?.metadata?.commitHash && (\n                    <CommitHash hash={output?.metadata?.commitHash} />\n                  )} */}\n              </div>\n              {previewContent()}\n            </div>\n          }\n          errorText={errorText}\n        />\n      </ToolContent>\n    </Tool>\n  );\n}\n",
      "type": "registry:component",
      "target": "components/agent/tools/write.tsx"
    }
  ]
}
{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "message",
  "type": "registry:component",
  "title": "AgentStart Message",
  "description": "Conversation message shells providing styled wrappers for user and assistant messages in transcripts. Includes variant-aware message body styling and avatar helpers.",
  "dependencies": [
    "ai",
    "class-variance-authority",
    "react"
  ],
  "registryDependencies": [
    "@coss/avatar"
  ],
  "files": [
    {
      "path": "src/registry/agentstart/message.tsx",
      "content": "/* agent-frontmatter:start\nAGENT: Conversation message shells\nPURPOSE: Provide styled wrappers for user and assistant messages in transcripts\nUSAGE: import { Message, MessageContent, MessageAvatar } from \\\"@/components/agent/message\\\"\nEXPORTS: Message, MessageContent, MessageAvatar\nFEATURES:\n  - Variant-aware message body styling\n  - Avatar helper for sender identity\nSEARCHABLE: message layout, avatar, transcript message, agent bubble\nagent-frontmatter:end */\n\nimport type { UIMessage } from \"ai\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\nimport type { ComponentProps, HTMLAttributes } from \"react\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { cn } from \"@/lib/utils\";\n\nexport type MessageProps = HTMLAttributes<HTMLDivElement> & {\n  from: UIMessage[\"role\"];\n};\n\nexport const Message = ({ className, from, ...props }: MessageProps) => (\n  <div\n    className={cn(\n      \"group flex w-full items-end justify-end gap-2 py-4\",\n      from === \"user\" ? \"is-user\" : \"is-assistant flex-row-reverse justify-end\",\n      className,\n    )}\n    {...props}\n  />\n);\n\nconst messageContentVariants = cva(\n  \"is-user:dark flex flex-col gap-2 overflow-hidden rounded-xl text-sm\",\n  {\n    variants: {\n      variant: {\n        contained: [\n          \"max-w-[80%] px-4 py-3\",\n          \"group-[.is-user]:bg-secondary group-[.is-user]:text-secondary-foreground\",\n        ],\n        flat: [\n          \"group-[.is-user]:max-w-[80%] group-[.is-user]:bg-secondary group-[.is-user]:px-4 group-[.is-user]:py-3 group-[.is-user]:text-foreground\",\n        ],\n      },\n    },\n    defaultVariants: {\n      variant: \"contained\",\n    },\n  },\n);\n\nexport type MessageContentProps = HTMLAttributes<HTMLDivElement> &\n  VariantProps<typeof messageContentVariants>;\n\nexport const MessageContent = ({\n  children,\n  className,\n  variant,\n  ...props\n}: MessageContentProps) => (\n  <div\n    className={cn(messageContentVariants({ variant, className }))}\n    {...props}\n  >\n    {children}\n  </div>\n);\n\nexport type MessageAvatarProps = ComponentProps<typeof Avatar> & {\n  src: string;\n  name?: string;\n};\n\nexport const MessageAvatar = ({\n  src,\n  name,\n  className,\n  ...props\n}: MessageAvatarProps) => (\n  <Avatar className={cn(\"size-8 ring-1 ring-border\", className)} {...props}>\n    <AvatarImage alt=\"\" className=\"mt-0 mb-0\" src={src} />\n    <AvatarFallback>{name?.slice(0, 2) || \"ME\"}</AvatarFallback>\n  </Avatar>\n);\n",
      "type": "registry:component",
      "target": "components/agent/message.tsx"
    }
  ]
}
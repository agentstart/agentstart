{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "prompt-input",
  "type": "registry:component",
  "title": "AgentStart Prompt Input",
  "description": "Reusable prompt input for both home page (create thread) and chat page (send message). Supports file attachments via drag-and-drop, loading states, and blob storage integration.",
  "dependencies": [
    "@phosphor-icons/react",
    "@tanstack/react-query",
    "agentstart",
    "ai",
    "react",
    "motion"
  ],
  "registryDependencies": [
    "spinner",
    "@coss/provider"
  ],
  "files": [
    {
      "path": "src/registry/agentstart/prompt-input.tsx",
      "content": "/* agent-frontmatter:start\nAGENT: AgentStart prompt input component\nPURPOSE: Integrated prompt input with file attachments, queue, and usage display\nUSAGE: <PromptInput threadId={threadId} />\nEXPORTS: PromptInput, PromptInputProps\nFEATURES:\n  - Dual mode: create new thread or send message to existing thread\n  - File attachments via drag-and-drop, paste, or picker\n  - Message queue management\n  - Usage summary display\n  - Integrated state management\nSEARCHABLE: prompt input, message input, thread creation, chat input, attachments\nagent-frontmatter:end */\n\n\"use client\";\n\nimport {\n  ArrowDownIcon,\n  ArrowUpIcon,\n  BugIcon,\n  FileIcon,\n  ImageIcon,\n  PaperPlaneTiltIcon,\n  PlusIcon,\n  StopIcon,\n  TrashIcon,\n  XIcon,\n} from \"@phosphor-icons/react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport type { AgentUsageSummary } from \"agentstart/agent\";\nimport type {\n  BlobFile,\n  BlobFileList,\n  QueuedAgentMessage,\n} from \"agentstart/client\";\nimport { useAgentStore, useBlobFiles, useDataPart } from \"agentstart/client\";\nimport { type FileUIPart, isFileUIPart } from \"ai\";\nimport { nanoid } from \"nanoid\";\nimport {\n  type ChangeEvent,\n  type ClipboardEventHandler,\n  type FormEvent,\n  type FormEventHandler,\n  Fragment,\n  type HTMLAttributes,\n  type KeyboardEventHandler,\n  type ReactNode,\n  type RefObject,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Menu, MenuItem, MenuPopup, MenuTrigger } from \"@/components/ui/menu\";\nimport {\n  PreviewCard,\n  PreviewCardPopup,\n  PreviewCardTrigger,\n} from \"@/components/ui/preview-card\";\nimport { Spinner } from \"@/components/ui/spinner\";\nimport type { Textarea } from \"@/components/ui/textarea\";\nimport { cn } from \"@/lib/utils\";\nimport {\n  Context,\n  ContextCacheUsage,\n  ContextContent,\n  ContextContentBody,\n  ContextContentFooter,\n  ContextContentHeader,\n  ContextInputUsage,\n  ContextOutputUsage,\n  ContextReasoningUsage,\n  ContextTrigger,\n} from \"./context\";\nimport { useAgentStartContext } from \"./provider\";\nimport {\n  Queue,\n  QueueItem,\n  QueueItemAction,\n  QueueItemActions,\n  QueueItemAttachment,\n  QueueItemContent,\n  QueueItemDescription,\n  QueueItemFile,\n  QueueItemIndicator,\n  QueueSection,\n  QueueSectionContent,\n  QueueSectionLabel,\n  QueueSectionTrigger,\n} from \"./queue\";\n\n// ============================================================================\n// Types\n// ============================================================================\n\nexport interface PromptInputProps {\n  className?: string;\n  threadId?: string;\n  initialUsage?: AgentUsageSummary;\n}\n\ntype SendState = \"idle\" | \"streaming\" | \"uploading\";\n\ntype SendButtonProps = {\n  children: ReactNode;\n  className?: string;\n  input: string;\n  attachmentsCount: number;\n  sendState: SendState;\n};\n\ntype AddAttachmentsMenuProps = {\n  onOpenFileDialog: () => void;\n};\n\ntype UsageDisplayProps = {\n  summary: AgentUsageSummary;\n};\n\ntype MessageQueueProps = {\n  messageQueue: QueuedAgentMessage[];\n  onSend: (id: string) => void;\n  onRemove: (id: string) => void;\n  onMove: (id: string, direction: \"up\" | \"down\") => void;\n};\n\ntype PromptInputAttachmentProps = HTMLAttributes<HTMLDivElement> & {\n  data: FileUIPart & { id: string };\n  onRemove: (id: string) => void;\n};\n\ntype PromptInputAttachmentsProps = Omit<\n  HTMLAttributes<HTMLDivElement>,\n  \"children\"\n> & {\n  files: (FileUIPart & { id: string })[];\n  children: (attachment: FileUIPart & { id: string }) => ReactNode;\n};\n\ntype PromptInputMessage = {\n  text?: string;\n  files?: FileUIPart[];\n};\n\ntype PromptInputFormProps = Omit<\n  HTMLAttributes<HTMLFormElement>,\n  \"onSubmit\"\n> & {\n  accept?: string;\n  multiple?: boolean;\n  globalDrop?: boolean;\n  attachments: (FileUIPart & { id: string })[];\n  onAddFiles: (files: File[] | FileList) => void;\n  onClearFiles: () => void;\n  fileInputRef?: RefObject<HTMLInputElement | null>;\n  onSubmit: (\n    message: PromptInputMessage,\n    event: FormEvent<HTMLFormElement>,\n  ) => void | Promise<void>;\n};\n\ntype PromptInputTextareaProps = React.ComponentProps<typeof Textarea> & {\n  value: string;\n  onChange: (e: ChangeEvent<HTMLTextAreaElement>) => void;\n  attachments: (FileUIPart & { id: string })[];\n  onRemoveAttachment: (id: string) => void;\n  onAddFiles: (files: File[]) => void;\n};\n\n// ============================================================================\n// Helper Functions\n// ============================================================================\n\nfunction summarizeQueuedMessage(queued: QueuedAgentMessage): string {\n  const raw = queued.text?.trim() ?? \"\";\n  const attachmentsCount = queued.files?.length ?? 0;\n\n  if (!raw) {\n    return attachmentsCount === 1\n      ? \"Queued attachment\"\n      : attachmentsCount > 0\n        ? `${attachmentsCount} queued attachments`\n        : \"Queued message\";\n  }\n\n  const firstLine = raw.split(\"\\n\")[0]?.trim() || \"Queued message\";\n  return firstLine.length > 80 ? `${firstLine.slice(0, 77)}…` : firstLine;\n}\n\nfunction summarizeQueuedRemainder(queued: QueuedAgentMessage): string {\n  const raw = queued.text?.trim() ?? \"\";\n  if (!raw) return \"\";\n\n  const lines = raw.split(\"\\n\").filter((line) => line.trim());\n  if (lines.length <= 1) return \"\";\n\n  const remainder = lines.slice(1).join(\" \").replace(/\\s+/g, \" \").trim();\n  return remainder.length > 120 ? `${remainder.slice(0, 117)}…` : remainder;\n}\n\n// ============================================================================\n// Small Utility Components\n// ============================================================================\n\nfunction SendButton({\n  children,\n  className,\n  input,\n  attachmentsCount,\n  sendState,\n}: SendButtonProps) {\n  const hasText = input.trim().length > 0;\n  const hasAttachments = attachmentsCount > 0;\n  const isStreaming = sendState === \"streaming\";\n  const isUploading = sendState === \"uploading\";\n  const shouldDisable =\n    (!isStreaming && !hasText && !hasAttachments) || isUploading;\n\n  return (\n    <Button\n      aria-label=\"Submit\"\n      className={className}\n      disabled={shouldDisable}\n      size=\"icon-sm\"\n      type=\"submit\"\n      variant=\"default\"\n    >\n      {children}\n    </Button>\n  );\n}\n\nfunction AddAttachmentsMenu({ onOpenFileDialog }: AddAttachmentsMenuProps) {\n  return (\n    <div className=\"flex items-center gap-1\">\n      <Menu>\n        <MenuTrigger\n          render={<Button size=\"icon-sm\" type=\"button\" variant=\"outline\" />}\n        >\n          <PlusIcon className=\"size-4\" weight=\"bold\" />\n        </MenuTrigger>\n        <MenuPopup align=\"start\">\n          <MenuItem\n            onClick={(e) => {\n              e.preventDefault();\n              onOpenFileDialog();\n            }}\n          >\n            <ImageIcon className=\"mr-2 size-4\" weight=\"duotone\" /> Add photos or\n            files\n          </MenuItem>\n        </MenuPopup>\n      </Menu>\n    </div>\n  );\n}\n\nfunction UsageDisplay({ summary }: UsageDisplayProps) {\n  return (\n    <div className=\"flex w-full justify-end\">\n      <Context\n        maxTokens={summary.maxTokens}\n        modelId={summary.modelId}\n        usage={summary.usage}\n        usedTokens={summary.usedTokens}\n      >\n        <ContextTrigger className=\"gap-1\" />\n        <ContextContent className=\"flex w-full max-w-xs flex-col lg:max-w-sm\">\n          <ContextContentHeader />\n          <ContextContentBody className=\"space-y-2\">\n            <ContextInputUsage />\n            <ContextOutputUsage />\n            <ContextReasoningUsage />\n            <ContextCacheUsage />\n          </ContextContentBody>\n          <ContextContentFooter />\n        </ContextContent>\n      </Context>\n    </div>\n  );\n}\n\n// ============================================================================\n// Attachment Components\n// ============================================================================\n\nfunction PromptInputAttachment({\n  data,\n  onRemove,\n  className,\n  ...props\n}: PromptInputAttachmentProps) {\n  const mediaType =\n    data.mediaType?.startsWith(\"image/\") && data.url ? \"image\" : \"file\";\n\n  const AttachmentIcon = useMemo(() => {\n    switch (mediaType) {\n      case \"image\": {\n        return <ImageIcon className=\"size-4.5 shrink-0\" weight=\"duotone\" />;\n      }\n      case \"file\": {\n        return <FileIcon className=\"size-4.5 shrink-0\" weight=\"duotone\" />;\n      }\n    }\n  }, [mediaType, data]);\n\n  const AttachmentPreview = useMemo(() => {\n    switch (mediaType) {\n      case \"image\": {\n        return (\n          <div className=\"max-w-60\">\n            <img src={data.url} alt={data.filename} className=\"object-cover\" />\n          </div>\n        );\n      }\n      case \"file\": {\n        return (\n          <div className=\"text-muted-foreground text-xs\">\n            <h4 className=\"wrap-break-word max-w-60 overflow-hidden whitespace-normal text-left font-semibold text-sm\">\n              {data.filename || \"Unknown file\"}\n            </h4>\n            {data.mediaType && <div>{data.mediaType}</div>}\n          </div>\n        );\n      }\n    }\n  }, [mediaType, data]);\n\n  return (\n    <div\n      className={cn(\n        \"group relative h-8 w-auto max-w-full rounded-lg border bg-background hover:bg-accent\",\n        className,\n      )}\n      key={data.id}\n      {...props}\n    >\n      <PreviewCard delay={0}>\n        <PreviewCardTrigger\n          className=\"min-w-0 flex-1\"\n          render={\n            <div className=\"flex size-full max-w-full cursor-pointer items-center justify-start gap-1 overflow-hidden px-2 text-muted-foreground\">\n              {AttachmentIcon}\n              <h4 className=\"w-full max-w-40 truncate text-left font-medium text-sm [direction:rtl]\">\n                {data.filename || \"Unknown file\"}\n              </h4>\n            </div>\n          }\n        />\n        <PreviewCardPopup>{AttachmentPreview}</PreviewCardPopup>\n      </PreviewCard>\n\n      <Button\n        aria-label=\"Remove attachment\"\n        className=\"-right-1.5 -top-1.5 absolute size-5 rounded-full opacity-0 group-hover:opacity-100\"\n        onClick={() => onRemove(data.id)}\n        size=\"icon\"\n        type=\"button\"\n        variant=\"outline\"\n      >\n        <XIcon className=\"size-3\" weight=\"bold\" />\n      </Button>\n    </div>\n  );\n}\n\nfunction PromptInputAttachments({\n  files,\n  className,\n  children,\n  ...props\n}: PromptInputAttachmentsProps) {\n  if (files.length === 0) return null;\n\n  return (\n    <div\n      className={cn(\n        \"overflow-hidden transition-[height] duration-300 ease-out\",\n        className,\n      )}\n      {...props}\n    >\n      <div className=\"space-y-2 px-2 pt-1 pb-2\">\n        <div className=\"flex flex-wrap gap-2\">\n          {files.map((file) => (\n            <Fragment key={file.id}>{children(file)}</Fragment>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}\n\n// ============================================================================\n// Form Components\n// ============================================================================\n\nfunction PromptInputTextarea({\n  value,\n  onChange,\n  attachments,\n  onRemoveAttachment,\n  onAddFiles,\n  className,\n  placeholder = \"Ask anything\",\n  ...props\n}: PromptInputTextareaProps) {\n  const [isComposing, setIsComposing] = useState(false);\n\n  const handleKeyDown: KeyboardEventHandler<HTMLTextAreaElement> = (e) => {\n    if (e.key === \"Enter\") {\n      if (isComposing || e.nativeEvent.isComposing) return;\n      if (e.shiftKey) return;\n      e.preventDefault();\n      e.currentTarget.form?.requestSubmit();\n    }\n\n    // Remove last attachment when Backspace is pressed and textarea is empty\n    if (\n      e.key === \"Backspace\" &&\n      e.currentTarget.value === \"\" &&\n      attachments.length > 0\n    ) {\n      e.preventDefault();\n      const lastAttachment = attachments.at(-1);\n      if (lastAttachment) {\n        onRemoveAttachment(lastAttachment.id);\n      }\n    }\n  };\n\n  const handlePaste: ClipboardEventHandler<HTMLTextAreaElement> = (event) => {\n    const items = event.clipboardData?.items;\n    if (!items) return;\n\n    const files: File[] = [];\n    for (const item of items) {\n      if (item.kind === \"file\") {\n        const file = item.getAsFile();\n        if (file) files.push(file);\n      }\n    }\n\n    if (files.length > 0) {\n      event.preventDefault();\n      onAddFiles(files);\n    }\n  };\n\n  return (\n    <textarea\n      data-slot=\"textarea\"\n      className={cn(\n        \"field-sizing-content min-h-17.5 w-full resize-none rounded-[inherit] px-[calc(--spacing(3)-1px)] py-[calc(--spacing(1.5)-1px)] outline-none max-sm:min-h-20.5\",\n      )}\n      name=\"message\"\n      onCompositionEnd={() => setIsComposing(false)}\n      onCompositionStart={() => setIsComposing(true)}\n      onKeyDown={handleKeyDown}\n      onPaste={handlePaste}\n      placeholder={placeholder}\n      value={value}\n      onChange={onChange}\n      {...props}\n    />\n  );\n}\n\nfunction PromptInputForm({\n  className,\n  accept,\n  multiple,\n  globalDrop,\n  attachments,\n  onAddFiles,\n  onClearFiles,\n  fileInputRef,\n  onSubmit,\n  children,\n  ...props\n}: PromptInputFormProps) {\n  const internalInputRef = useRef<HTMLInputElement | null>(null);\n  const inputRef = fileInputRef || internalInputRef;\n  const formRef = useRef<HTMLFormElement | null>(null);\n  const anchorRef = useRef<HTMLSpanElement>(null);\n\n  useEffect(() => {\n    const root = anchorRef.current?.closest(\"form\");\n    if (root instanceof HTMLFormElement) {\n      formRef.current = root;\n    }\n  }, []);\n\n  const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n    if (event.currentTarget.files) {\n      onAddFiles(event.currentTarget.files);\n    }\n  };\n\n  const handleSubmit: FormEventHandler<HTMLFormElement> = async (event) => {\n    event.preventDefault();\n\n    const form = event.currentTarget;\n    form.reset();\n\n    // Convert blob URLs to data URLs\n    const convertedFiles = await Promise.all(\n      attachments.map(async ({ id, ...item }) => {\n        if (item.url?.startsWith(\"blob:\")) {\n          const response = await fetch(item.url);\n          const blob = await response.blob();\n          const dataUrl = await new Promise<string>((resolve, reject) => {\n            const reader = new FileReader();\n            reader.onloadend = () => resolve(reader.result as string);\n            reader.onerror = reject;\n            reader.readAsDataURL(blob);\n          });\n          return { ...item, url: dataUrl };\n        }\n        return item;\n      }),\n    );\n\n    try {\n      const textareas = form.querySelectorAll(\"textarea[name='message']\");\n      const text = (textareas[0] as HTMLTextAreaElement)?.value || \"\";\n      const result = onSubmit({ text, files: convertedFiles }, event);\n      await result;\n      onClearFiles();\n    } catch {\n      // Don't clear on error\n    }\n  };\n\n  // Drag & drop on form\n  useEffect(() => {\n    const form = formRef.current;\n    if (!form) return;\n\n    const onDragOver = (e: DragEvent) => {\n      if (e.dataTransfer?.types?.includes(\"Files\")) {\n        e.preventDefault();\n      }\n    };\n    const onDrop = (e: DragEvent) => {\n      if (e.dataTransfer?.types?.includes(\"Files\")) {\n        e.preventDefault();\n      }\n      if (e.dataTransfer?.files && e.dataTransfer.files.length > 0) {\n        onAddFiles(e.dataTransfer.files);\n      }\n    };\n    form.addEventListener(\"dragover\", onDragOver);\n    form.addEventListener(\"drop\", onDrop);\n    return () => {\n      form.removeEventListener(\"dragover\", onDragOver);\n      form.removeEventListener(\"drop\", onDrop);\n    };\n  }, [onAddFiles]);\n\n  // Global drop (opt-in)\n  useEffect(() => {\n    if (!globalDrop) return;\n\n    const onDragOver = (e: DragEvent) => {\n      if (e.dataTransfer?.types?.includes(\"Files\")) {\n        e.preventDefault();\n      }\n    };\n    const onDrop = (e: DragEvent) => {\n      if (e.dataTransfer?.types?.includes(\"Files\")) {\n        e.preventDefault();\n      }\n      if (e.dataTransfer?.files && e.dataTransfer.files.length > 0) {\n        onAddFiles(e.dataTransfer.files);\n      }\n    };\n    document.addEventListener(\"dragover\", onDragOver);\n    document.addEventListener(\"drop\", onDrop);\n    return () => {\n      document.removeEventListener(\"dragover\", onDragOver);\n      document.removeEventListener(\"drop\", onDrop);\n    };\n  }, [onAddFiles, globalDrop]);\n\n  // Cleanup blob URLs\n  useEffect(\n    () => () => {\n      for (const f of attachments) {\n        if (f.url) URL.revokeObjectURL(f.url);\n      }\n    },\n    [attachments],\n  );\n\n  return (\n    <>\n      <span aria-hidden=\"true\" className=\"hidden\" ref={anchorRef} />\n      <input\n        accept={accept}\n        aria-label=\"Upload files\"\n        className=\"hidden\"\n        multiple={multiple}\n        onChange={handleChange}\n        ref={inputRef}\n        title=\"Upload files\"\n        type=\"file\"\n      />\n      <form\n        className={cn(\"w-full\", className)}\n        onSubmit={handleSubmit}\n        {...props}\n      >\n        {children}\n      </form>\n    </>\n  );\n}\n\n// ============================================================================\n// MessageQueue Component\n// ============================================================================\n\nfunction MessageQueue({\n  messageQueue,\n  onSend,\n  onRemove,\n  onMove,\n}: MessageQueueProps) {\n  if (messageQueue.length === 0) return null;\n\n  return (\n    <Queue className=\"relative mx-auto w-[95%] rounded-b-none border-none bg-secondary px-1 shadow-none\">\n      <QueueSection>\n        <QueueSectionTrigger className=\"py-1\">\n          <QueueSectionLabel count={messageQueue.length} label=\"Queued\" />\n        </QueueSectionTrigger>\n        <QueueSectionContent className=\"pt-1\">\n          <div className=\"flex flex-col gap-1\">\n            {messageQueue.map((queued, index) => {\n              const summary = summarizeQueuedMessage(queued);\n              const remainder = summarizeQueuedRemainder(queued);\n              const attachments =\n                (queued.files instanceof FileList\n                  ? Array.from(queued.files)\n                  : queued.files) ?? [];\n              const attachmentsLabel =\n                attachments.length > 0\n                  ? `${attachments.length} attachment${attachments.length > 1 ? \"s\" : \"\"}`\n                  : null;\n\n              return (\n                <QueueItem\n                  key={queued.id}\n                  className=\"flex flex-row items-center gap-2 py-0.5 hover:bg-background\"\n                >\n                  <QueueItemIndicator />\n                  <QueueItemContent title={summary}>{summary}</QueueItemContent>\n                  <QueueItemAction\n                    aria-label=\"Remove message from queue\"\n                    onClick={() => onRemove(queued.id)}\n                  >\n                    <TrashIcon className=\"size-3\" weight=\"duotone\" />\n                  </QueueItemAction>\n                  <QueueItemAction\n                    aria-label=\"Send message now\"\n                    onClick={() => onSend(queued.id)}\n                  >\n                    <PaperPlaneTiltIcon className=\"size-3\" weight=\"duotone\" />\n                  </QueueItemAction>\n                  {remainder ? (\n                    <QueueItemDescription>{remainder}</QueueItemDescription>\n                  ) : null}\n                  {attachmentsLabel ? (\n                    <QueueItemDescription>\n                      {attachmentsLabel}\n                    </QueueItemDescription>\n                  ) : null}\n                  <QueueItemActions>\n                    {index > 0 ? (\n                      <QueueItemAction\n                        aria-label=\"Move message up\"\n                        onClick={() => onMove(queued.id, \"up\")}\n                      >\n                        <ArrowUpIcon className=\"size-3\" weight=\"bold\" />\n                      </QueueItemAction>\n                    ) : null}\n                    {index < messageQueue.length - 1 ? (\n                      <QueueItemAction\n                        aria-label=\"Move message down\"\n                        onClick={() => onMove(queued.id, \"down\")}\n                      >\n                        <ArrowDownIcon className=\"size-3\" weight=\"bold\" />\n                      </QueueItemAction>\n                    ) : null}\n                  </QueueItemActions>\n\n                  {attachments.length > 0 ? (\n                    <QueueItemAttachment>\n                      {attachments.map((file, fileIndex) => {\n                        const filename =\n                          file instanceof File\n                            ? file.name\n                            : (file.filename ??\n                              file.mediaType ??\n                              `Attachment ${fileIndex + 1}`);\n                        const key = `${queued.id}-attachment-${fileIndex}`;\n                        return (\n                          <QueueItemFile key={key} title={filename}>\n                            {filename}\n                          </QueueItemFile>\n                        );\n                      })}\n                    </QueueItemAttachment>\n                  ) : null}\n                </QueueItem>\n              );\n            })}\n          </div>\n        </QueueSectionContent>\n      </QueueSection>\n    </Queue>\n  );\n}\n\n// ============================================================================\n// Main PromptInput Component\n// ============================================================================\n\nexport function PromptInput({\n  className,\n  threadId,\n  initialUsage,\n}: PromptInputProps = {}) {\n  const { client, orpc, navigate } = useAgentStartContext();\n  const queryClient = useQueryClient();\n\n  // Input state\n  const [input, setInput] = useState(\"\");\n\n  // Attachments state\n  const [attachments, setAttachments] = useState<\n    (FileUIPart & { id: string })[]\n  >([]);\n  const fileInputRef = useRef<HTMLInputElement | null>(null);\n\n  // Agent store\n  const storeKey = threadId ?? \"default\";\n  const status = useAgentStore((state) => state.status, storeKey);\n  const id = useAgentStore((state) => state.id, storeKey);\n  const stop = useAgentStore((state) => state.stop, storeKey);\n  const sendMessage = useAgentStore((state) => state.sendMessage, storeKey);\n  const messageQueue = useAgentStore((state) => state.messageQueue, storeKey);\n  const enqueueQueuedMessage = useAgentStore(\n    (state) => state.enqueueQueuedMessage,\n    storeKey,\n  );\n  const takeQueuedMessageById = useAgentStore(\n    (state) => state.takeQueuedMessageById,\n    storeKey,\n  );\n  const removeQueuedMessage = useAgentStore(\n    (state) => state.removeQueuedMessage,\n    storeKey,\n  );\n  const moveQueuedMessage = useAgentStore(\n    (state) => state.moveQueuedMessage,\n    storeKey,\n  );\n  const prependQueuedMessage = useAgentStore(\n    (state) => state.prependQueuedMessage,\n    storeKey,\n  );\n  const newThreadDraft = useAgentStore((state) => state.newThreadDraft);\n  const setNewThreadDraft = useAgentStore((state) => state.setNewThreadDraft);\n\n  // Usage tracking\n  const [usagePart] = useDataPart<\"data-agentstart-usage\">(\n    \"data-agentstart-usage\",\n    storeKey,\n  );\n  const usageSummary = usagePart ?? initialUsage ?? null;\n  const showUsage = Boolean(threadId) && Boolean(usageSummary);\n\n  // Blob files\n  const {\n    files: blobFiles,\n    setFiles: setBlobFiles,\n    processFiles,\n    clearFiles,\n    isUploading,\n  } = useBlobFiles(client);\n\n  const createThreadMutation = useMutation(\n    orpc.thread.create.mutationOptions(),\n  );\n\n  // Attachment handlers\n  const addFiles = (files: File[] | FileList) => {\n    const incoming = Array.from(files);\n    if (incoming.length === 0) return;\n\n    setAttachments((prev) =>\n      prev.concat(\n        incoming.map((file) => ({\n          id: nanoid(),\n          type: \"file\" as const,\n          url: URL.createObjectURL(file),\n          mediaType: file.type,\n          filename: file.name,\n        })),\n      ),\n    );\n  };\n\n  const removeAttachment = (id: string) => {\n    setAttachments((prev) => {\n      const found = prev.find((f) => f.id === id);\n      if (found?.url) URL.revokeObjectURL(found.url);\n      return prev.filter((f) => f.id !== id);\n    });\n  };\n\n  const clearAttachments = () => {\n    setAttachments((prev) => {\n      for (const f of prev) if (f.url) URL.revokeObjectURL(f.url);\n      return [];\n    });\n  };\n\n  const openFileDialog = () => {\n    fileInputRef.current?.click();\n  };\n\n  // Sync attachments with blob files\n  useEffect(() => {\n    if (attachments.length === 0) {\n      setBlobFiles([]);\n      return;\n    }\n\n    const normalized: BlobFile[] = attachments.map(\n      ({ id: _id, ...rest }) => rest,\n    );\n    setBlobFiles(normalized);\n  }, [attachments, setBlobFiles]);\n\n  const handleMessageSubmit = async (message: {\n    text?: string;\n    files?: BlobFileList;\n  }) => {\n    let files: FileList | FileUIPart[] | undefined;\n\n    if (message?.files && Array.isArray(message.files)) {\n      if (message.files.every((file) => file instanceof File)) {\n        const dataTransfer = new DataTransfer();\n        for (const file of message.files) {\n          dataTransfer.items.add(file);\n        }\n        files = dataTransfer.files;\n      } else if (\n        message.files.every(\n          (file) => !(file instanceof File) && isFileUIPart(file),\n        )\n      ) {\n        files = message.files as FileUIPart[];\n      }\n    }\n\n    return sendMessage(\n      { text: message?.text ?? \"\", files },\n      { body: { threadId } },\n    );\n  };\n\n  const handleSubmit = async (message: PromptInputMessage) => {\n    const isBusy = [\"streaming\", \"submitted\"].includes(status);\n    const hasText = Boolean(message.text?.trim());\n    const hasAttachments = Boolean(blobFiles.length);\n    if (!(hasText || hasAttachments)) return;\n\n    let processedFiles: BlobFileList | undefined;\n    try {\n      processedFiles = await processFiles();\n    } catch (error) {\n      console.error(\n        error instanceof Error ? error.message : \"File processing failed\",\n      );\n      return;\n    }\n\n    if (threadId) {\n      const trimmedText = message.text?.trim() ?? \"\";\n      const queueText = trimmedText.length > 0 ? trimmedText : undefined;\n      let queueFiles: FileUIPart[] | undefined;\n      if (processedFiles) {\n        const fileArray =\n          processedFiles instanceof FileList\n            ? Array.from(processedFiles)\n            : processedFiles;\n        queueFiles = fileArray.filter(\n          (file): file is FileUIPart => \"type\" in file && file.type === \"file\",\n        );\n      }\n      const shouldQueue = isBusy || messageQueue.length > 0;\n\n      if (shouldQueue) {\n        enqueueQueuedMessage({\n          text: queueText,\n          files: queueFiles,\n        });\n        setInput(\"\");\n        clearFiles();\n        clearAttachments();\n        return;\n      }\n    }\n\n    if (isBusy) {\n      stop();\n      return;\n    }\n\n    if (threadId) {\n      setInput(\"\");\n      clearFiles();\n      clearAttachments();\n      handleMessageSubmit({\n        text: message.text?.trim() ?? \"\",\n        files: processedFiles,\n      });\n    } else {\n      const trimmedText = message.text?.trim() ?? \"\";\n      setNewThreadDraft({\n        text: trimmedText,\n        files: processedFiles,\n      });\n\n      try {\n        setInput(\"\");\n        clearFiles();\n        clearAttachments();\n        const { threadId: newThreadId } =\n          await createThreadMutation.mutateAsync({\n            visibility: \"public\",\n          });\n        navigate(`/thread/${newThreadId}`);\n        queryClient.invalidateQueries(\n          orpc.thread.list.queryOptions({ input: {} }),\n        );\n      } catch (error) {\n        setNewThreadDraft(null);\n        setInput(message.text ?? \"\");\n        throw error;\n      }\n    }\n  };\n\n  const isPending = threadId\n    ? status === \"submitted\"\n    : createThreadMutation.isPending;\n  const isStreaming = status === \"streaming\";\n  const hasError = threadId ? false : createThreadMutation.isError;\n  const sendState: SendState = isStreaming\n    ? \"streaming\"\n    : isUploading\n      ? \"uploading\"\n      : \"idle\";\n\n  const getSendIcon = () => {\n    if (hasError) return <BugIcon className=\"size-4.5\" weight=\"duotone\" />;\n    if (sendState === \"streaming\")\n      return <StopIcon className=\"size-4.5\" weight=\"bold\" />;\n    if (sendState === \"uploading\") return <Spinner className=\"size-4.5\" />;\n    if (isPending) return <Spinner className=\"size-4.5\" />;\n    return <ArrowUpIcon className=\"size-4.5\" weight=\"bold\" />;\n  };\n\n  const handleSendQueuedMessage = async (queuedId: string) => {\n    if (!threadId) return;\n    const queued = takeQueuedMessageById(queuedId);\n    if (!queued) return;\n    if ([\"streaming\", \"submitted\"].includes(status)) {\n      try {\n        await stop();\n      } catch (error) {\n        console.error(\n          \"Failed to stop active message before sending queued item\",\n          error,\n        );\n      }\n    }\n    try {\n      await handleMessageSubmit({\n        text: queued.text ?? \"\",\n        files: queued.files,\n      });\n    } catch (error) {\n      console.error(\"Failed to send queued message immediately\", error);\n      prependQueuedMessage(queued);\n    }\n  };\n\n  useEffect(() => {\n    if (!threadId || !id || !newThreadDraft) return;\n\n    const { text, files } = newThreadDraft;\n    const storedText = text?.trim() ?? \"\";\n    const fileCount =\n      files instanceof FileList\n        ? files.length\n        : Array.isArray(files)\n          ? files.length\n          : 0;\n\n    if (!storedText && fileCount === 0) return;\n\n    setNewThreadDraft(null);\n\n    void (async () => {\n      try {\n        await handleMessageSubmit({ text: storedText, files });\n      } catch {\n        setNewThreadDraft({ text: storedText, files });\n      }\n    })();\n  }, [id, newThreadDraft, setNewThreadDraft, threadId]);\n\n  return (\n    <div className=\"mx-auto flex w-full flex-col px-4 sm:min-w-[390px] sm:max-w-3xl\">\n      <MessageQueue\n        messageQueue={messageQueue}\n        onSend={handleSendQueuedMessage}\n        onRemove={removeQueuedMessage}\n        onMove={moveQueuedMessage}\n      />\n      <PromptInputForm\n        globalDrop\n        multiple\n        attachments={attachments}\n        onAddFiles={addFiles}\n        onClearFiles={clearAttachments}\n        fileInputRef={fileInputRef}\n        onSubmit={handleSubmit}\n        className={cn(\n          \"mx-auto w-full max-w-full rounded-[22px] bg-secondary p-1.5 *:data-[slot=input-group]:rounded-[22px] sm:min-w-[390px] sm:max-w-3xl\",\n          className,\n        )}\n      >\n        <PromptInputAttachments files={attachments}>\n          {(attachment) => (\n            <PromptInputAttachment\n              data={attachment}\n              onRemove={removeAttachment}\n            />\n          )}\n        </PromptInputAttachments>\n\n        {/* Wrapper */}\n        <div\n          data-slot=\"textarea-control\"\n          className={cn(\n            \"field-sizing-content relative inline-flex max-h-60 min-h-24 w-full flex-col rounded-[18px] border border-input bg-background bg-clip-padding p-2! text-base shadow-xs transition-all duration-300 has-focus-visible:has-aria-invalid:border-destructive/64 has-aria-invalid:border-destructive/36 has-focus-visible:border-ring has-disabled:opacity-64 sm:text-sm dark:bg-input/32 dark:bg-clip-border [&:has(:disabled,:focus-visible,[aria-invalid])]:shadow-none\",\n            className,\n          )}\n        >\n          {/* Textarea */}\n          <PromptInputTextarea\n            className=\"rounded-inherit bg-background px-4\"\n            placeholder=\"Ask anything\"\n            value={input}\n            onChange={(e) => setInput(e.target.value)}\n            attachments={attachments}\n            onRemoveAttachment={removeAttachment}\n            onAddFiles={addFiles}\n            autoFocus\n          />\n          {/* Addon */}\n          <div className=\"flex items-center justify-between gap-1 px-2 pb-1\">\n            <AddAttachmentsMenu onOpenFileDialog={openFileDialog} />\n            <div className=\"flex items-center gap-2\">\n              {showUsage && usageSummary ? (\n                <UsageDisplay summary={usageSummary} />\n              ) : null}\n\n              <SendButton\n                input={input}\n                attachmentsCount={attachments.length}\n                sendState={sendState}\n              >\n                {getSendIcon()}\n              </SendButton>\n            </div>\n          </div>\n        </div>\n      </PromptInputForm>\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": "components/agent/prompt-input.tsx"
    }
  ]
}
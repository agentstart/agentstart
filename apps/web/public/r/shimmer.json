{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "shimmer",
  "type": "registry:component",
  "title": "AgentStart Shimmer",
  "description": "Display loading status with animated text and shimmer effects. Shows playful status messages during agent processing.",
  "dependencies": [
    "motion",
    "react"
  ],
  "registryDependencies": [],
  "files": [
    {
      "path": "src/registry/agentstart/shimmer.tsx",
      "content": "/* agent-frontmatter:start\nAGENT: Shimmer loading indicators\nPURPOSE: Animated loading states with randomized text and configurable effects\nUSAGE: <Shimmer duration={2}>Loading...</Shimmer> or <StatusIndicators randomText />\nEXPORTS: Shimmer, StatusIndicators\nFEATURES:\n  - Animated gradient shimmer with configurable duration and spread\n  - StatusIndicators with randomized action words\n  - Multiple animation variants (fade, slide, blur-fade)\n  - Motion-based smooth transitions\nSEARCHABLE: shimmer, loading animation, status indicator, animated loader\nagent-frontmatter:end */\n\n\"use client\";\n\nimport { AnimatePresence, motion } from \"motion/react\";\nimport {\n  type CSSProperties,\n  type ElementType,\n  type JSX,\n  memo,\n  type ReactNode,\n  useMemo,\n} from \"react\";\nimport { cn } from \"@/lib/utils\";\n\nexport interface ShimmerProps {\n  children: string;\n  as?: ElementType;\n  className?: string;\n  duration?: number;\n  spread?: number;\n}\n\nexport const Shimmer = memo<ShimmerProps>(\n  ({ children, as: Component = \"p\", className, duration = 2, spread = 2 }) => {\n    const MotionComponent = motion.create(\n      Component as keyof JSX.IntrinsicElements,\n    );\n\n    const dynamicSpread = useMemo(\n      () => (children?.length ?? 0) * spread,\n      [children, spread],\n    );\n\n    return (\n      <MotionComponent\n        animate={{ backgroundPosition: \"0% center\" }}\n        className={cn(\n          \"relative inline-block bg-size-[250%_100%,auto] bg-clip-text text-transparent\",\n          \"[--bg:linear-gradient(90deg,#0000_calc(50%-var(--spread)),var(--color-background),#0000_calc(50%+var(--spread)))] [background-repeat:no-repeat,padding-box]\",\n          className,\n        )}\n        initial={{ backgroundPosition: \"100% center\" }}\n        style={\n          {\n            \"--spread\": `${dynamicSpread}px`,\n            backgroundImage:\n              \"var(--bg), linear-gradient(var(--color-muted-foreground), var(--color-muted-foreground))\",\n          } as CSSProperties\n        }\n        transition={{\n          repeat: Number.POSITIVE_INFINITY,\n          duration,\n          ease: \"linear\",\n        }}\n      >\n        {children}\n      </MotionComponent>\n    );\n  },\n);\n\nconst words = [\n  \"Accomplishing\",\n  \"Actioning\",\n  \"Actualizing\",\n  \"Baking\",\n  \"Booping\",\n  \"Brewing\",\n  \"Calculating\",\n  \"Cerebrating\",\n  \"Channelling\",\n  \"Churning\",\n  \"Clauding\",\n  \"Coalescing\",\n  \"Cogitating\",\n  \"Computing\",\n  \"Combobulating\",\n  \"Concocting\",\n  \"Considering\",\n  \"Contemplating\",\n  \"Cooking\",\n  \"Crafting\",\n  \"Creating\",\n  \"Crunching\",\n  \"Deciphering\",\n  \"Deliberating\",\n  \"Determining\",\n  \"Discombobulating\",\n  \"Doing\",\n  \"Effecting\",\n  \"Elucidating\",\n  \"Enchanting\",\n  \"Envisioning\",\n  \"Finagling\",\n  \"Flibbertigibbeting\",\n  \"Forging\",\n  \"Forming\",\n  \"Frolicking\",\n  \"Generating\",\n  \"Germinating\",\n  \"Hatching\",\n  \"Herding\",\n  \"Honking\",\n  \"Ideating\",\n  \"Imagining\",\n  \"Incubating\",\n  \"Inferring\",\n  \"Manifesting\",\n  \"Marinating\",\n  \"Meandering\",\n  \"Moseying\",\n  \"Mulling\",\n  \"Mustering\",\n  \"Musing\",\n  \"Noodling\",\n  \"Percolating\",\n  \"Perusing\",\n  \"Philosophising\",\n  \"Pontificating\",\n  \"Pondering\",\n  \"Processing\",\n  \"Puttering\",\n  \"Puzzling\",\n  \"Reticulating\",\n  \"Ruminating\",\n  \"Scheming\",\n  \"Schlepping\",\n  \"Shimmying\",\n  \"Simmering\",\n  \"Smooshing\",\n  \"Spelunking\",\n  \"Spinning\",\n  \"Stewing\",\n  \"Sussing\",\n  \"Synthesizing\",\n  \"Thinking\",\n  \"Tinkering\",\n  \"Transmuting\",\n  \"Unfurling\",\n  \"Unravelling\",\n  \"Vibing\",\n  \"Wandering\",\n  \"Whirring\",\n  \"Wibbling\",\n  \"Working\",\n  \"Wrangling\",\n];\n\nconst animations = {\n  fade: {\n    initial: { opacity: 0 },\n    animate: { opacity: 1 },\n    exit: { opacity: 0 },\n  },\n  slide: {\n    initial: { opacity: 0, x: 10 },\n    animate: { opacity: 1, x: 0 },\n    exit: { opacity: 0, x: -10 },\n  },\n  \"blur-fade\": {\n    initial: { opacity: 0, filter: \"blur(6px)\" },\n    animate: { opacity: 1, filter: \"blur(0px)\" },\n    exit: { opacity: 0, filter: \"blur(6px)\" },\n  },\n};\n\ninterface StatusIndicatorsProps {\n  prefix?: ReactNode;\n  suffix?: ReactNode;\n  text?: string;\n  randomText?: boolean;\n  shimmerDuration?: number;\n  className?: string;\n  fadeDuration?: number;\n  variant?: \"fade\" | \"slide\" | \"blur-fade\";\n}\n\nexport function StatusIndicators({\n  prefix,\n  suffix,\n  text,\n  randomText = true,\n  shimmerDuration = 1,\n  className,\n  fadeDuration = 0.2,\n  variant = \"fade\",\n}: StatusIndicatorsProps) {\n  const selected = animations[variant];\n\n  const displayText = useMemo(() => {\n    if (randomText) {\n      const randomIndex = Math.floor(Math.random() * words.length);\n      return `${words[randomIndex]}...`;\n    }\n    return text;\n  }, [randomText, text]);\n\n  return (\n    <div className=\"relative flex h-8 items-center whitespace-nowrap\">\n      <AnimatePresence mode=\"wait\">\n        {displayText && (\n          <motion.div\n            key={displayText}\n            initial={selected.initial}\n            animate={selected.animate}\n            exit={selected.exit}\n            transition={{\n              duration: fadeDuration,\n              ease: \"easeInOut\",\n            }}\n            className=\"flex items-center gap-1.5 text-muted-foreground dark:text-[#666666]\"\n          >\n            {prefix}\n            <Shimmer className={className} duration={shimmerDuration}>\n              {displayText || \"\"}\n            </Shimmer>\n            {suffix}\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": "components/agent/shimmer.tsx"
    }
  ]
}
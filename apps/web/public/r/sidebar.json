{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "sidebar",
  "type": "registry:component",
  "title": "AgentStart Sidebar",
  "description": "A shadcn-based sidebar component that displays AgentStart threads with TanStack Query for data fetching, infinite scroll pagination, and thread management capabilities.",
  "dependencies": [
    "@agentstart/utils",
    "@tanstack/react-query",
    "@phosphor-icons/react",
    "agentstart",
    "react"
  ],
  "registryDependencies": [
    "button",
    "dropdown-menu",
    "empty",
    "scroll-area",
    "sidebar",
    "tooltip"
  ],
  "files": [
    {
      "path": "src/registry/agentstart/sidebar/sidebar.tsx",
      "content": "/* agent-frontmatter:start\nAGENT: Sidebar layout\nPURPOSE: Compose a shadcn sidebar that lists AgentStart threads using TanStack Query\nUSAGE: <Sidebar>{mainContent}</Sidebar>\nEXPORTS: Sidebar, SidebarProps\nFEATURES:\n  - Fetches threads via TanStack Query with automatic caching and refetching\n  - Supports infinite scroll pagination, thread creation, and selection callbacks\n  - Wraps children inside <SidebarInset> for a ready-to-use layout\nSEARCHABLE: agent layout, sidebar, agent threads list, tanstack query\nagent-frontmatter:end */\n\n\"use client\";\n\nimport {\n  DotsThreeIcon,\n  EmptyIcon,\n  PencilSimpleIcon,\n  TrashIcon,\n  WarningCircleIcon,\n} from \"@phosphor-icons/react\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport type { DBThread } from \"agentstart/db\";\nimport { type ReactNode, useMemo } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuPositioner,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport {\n  Empty,\n  EmptyContent,\n  EmptyDescription,\n  EmptyHeader,\n  EmptyMedia,\n  EmptyTitle,\n} from \"@/components/ui/empty\";\nimport {\n  Sidebar as ShadcnSidebar,\n  SidebarInset,\n  SidebarMenuSkeleton,\n  SidebarProvider,\n  SidebarRail,\n} from \"@/components/ui/sidebar\";\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\";\nimport { cn } from \"@/lib/utils\";\nimport { useAgentStartContext } from \"../provider\";\nimport { SidebarContent } from \"./sidebar-content\";\nimport { SidebarFooter } from \"./sidebar-footer\";\nimport { SidebarHeader } from \"./sidebar-header\";\nimport { SidebarItem } from \"./sidebar-item\";\n\nexport type SidebarProps = {\n  children?: ReactNode;\n  className?: string;\n  // Thread selection\n  selectedThreadId?: string;\n  onSelectThread?: (thread: DBThread) => void;\n  // Query configuration\n  pageSize?: number;\n  // UI customization\n  header?: {\n    title?: string;\n  };\n  footer?: ReactNode;\n  emptyState?: ReactNode;\n  errorState?: (error: Error, retry: () => void) => ReactNode;\n  // Sidebar configuration\n  sidebar?: {\n    variant?: \"sidebar\" | \"floating\" | \"inset\";\n    side?: \"left\" | \"right\";\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\";\n    className?: string;\n    defaultOpen?: boolean;\n    open?: boolean;\n    onOpenChange?: (open: boolean) => void;\n  };\n};\n\nexport function Sidebar({\n  children,\n  className,\n  selectedThreadId,\n  onSelectThread,\n  pageSize = 20,\n  header,\n  footer,\n  emptyState,\n  errorState,\n  sidebar,\n}: SidebarProps) {\n  const { orpc } = useAgentStartContext();\n\n  // Infinite query for thread list with pagination\n  const { data, error, isLoading, isError, refetch } = useQuery(\n    orpc.thread.list.queryOptions({\n      input: { pageSize },\n    }),\n  );\n\n  // Rename mutation\n  const updateMutation = useMutation(\n    orpc.thread.update.mutationOptions({\n      onSuccess: () => {\n        refetch();\n      },\n    }),\n  );\n\n  // Delete mutation\n  const deleteMutation = useMutation(\n    orpc.thread.delete.mutationOptions({\n      onSuccess: () => {\n        // Invalidate and refetch the thread list\n        refetch();\n      },\n    }),\n  );\n\n  // Flatten all pages into a single array of threads\n  const threads = useMemo(() => {\n    if (!data) return [];\n    return data.threads.map((thread) => normalizeThread(thread));\n  }, [data]);\n\n  const renderThreads = useMemo(() => {\n    if (isLoading && threads.length === 0) {\n      return Array.from({ length: 6 }).map((_, index) => (\n        <SidebarMenuSkeleton key={`thread-skeleton-${index}`} showIcon />\n      ));\n    }\n\n    if (isError && error) {\n      if (errorState) {\n        return errorState(error, refetch);\n      }\n      return (\n        <Empty>\n          <EmptyHeader>\n            <EmptyMedia variant=\"icon\">\n              <WarningCircleIcon\n                weight=\"duotone\"\n                className=\"size-5 text-destructive\"\n              />\n            </EmptyMedia>\n            <EmptyTitle>Failed to load threads</EmptyTitle>\n            <EmptyDescription>{error.message}</EmptyDescription>\n          </EmptyHeader>\n          <EmptyContent>\n            <Button\n              type=\"button\"\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => refetch()}\n            >\n              Retry\n            </Button>\n          </EmptyContent>\n        </Empty>\n      );\n    }\n\n    if (threads.length === 0) {\n      if (emptyState) {\n        return emptyState;\n      }\n      return (\n        <Empty>\n          <EmptyHeader>\n            <EmptyMedia variant=\"icon\">\n              <EmptyIcon\n                weight=\"duotone\"\n                className=\"size-5 text-muted-foreground\"\n              />\n            </EmptyMedia>\n            <EmptyTitle>No threads</EmptyTitle>\n            <EmptyDescription>\n              Start chatting with the agent to see conversations here.\n            </EmptyDescription>\n          </EmptyHeader>\n        </Empty>\n      );\n    }\n\n    const items = threads.map((thread) => (\n      <SidebarItem\n        key={thread.id}\n        thread={thread}\n        isActive={thread.id === selectedThreadId}\n        onSelect={onSelectThread}\n        leading={<ThreadAvatar title={thread.title} />}\n        trailing={\n          <MoreOptions\n            threadTitle={thread.title ?? \"Thread\"}\n            onRename={(title) =>\n              updateMutation.mutate({\n                threadId: thread.id,\n                data: { title },\n              })\n            }\n            onDelete={() => deleteMutation.mutate({ threadId: thread.id })}\n          />\n        }\n      />\n    ));\n\n    return items;\n  }, [\n    selectedThreadId,\n    emptyState,\n    error,\n    errorState,\n    refetch,\n    onSelectThread,\n    isError,\n    isLoading,\n    threads,\n    deleteMutation.mutate,\n    updateMutation.mutate,\n  ]);\n\n  return (\n    <SidebarProvider\n      defaultOpen={sidebar?.defaultOpen}\n      open={sidebar?.open}\n      onOpenChange={sidebar?.onOpenChange}\n      className={className}\n    >\n      <ShadcnSidebar\n        variant={sidebar?.variant ?? \"sidebar\"}\n        side={sidebar?.side ?? \"left\"}\n        collapsible={sidebar?.collapsible ?? \"icon\"}\n        className={cn(\n          sidebar?.side === \"right\" ? \"border-l\" : \"border-r\",\n          \"border-sidebar-border/60\",\n          sidebar?.className,\n        )}\n      >\n        <SidebarHeader title={header?.title} />\n        <SidebarContent>{renderThreads}</SidebarContent>\n        <SidebarFooter footer={footer} />\n        <SidebarRail />\n      </ShadcnSidebar>\n      <SidebarInset className=\"h-screen bg-accent/80\">{children}</SidebarInset>\n    </SidebarProvider>\n  );\n}\n\nfunction normalizeThread(thread: DBThread): DBThread {\n  return {\n    ...thread,\n    createdAt:\n      thread.createdAt instanceof Date\n        ? thread.createdAt\n        : new Date(thread.createdAt),\n    updatedAt:\n      thread.updatedAt instanceof Date\n        ? thread.updatedAt\n        : new Date(thread.updatedAt),\n  };\n}\n\nfunction ThreadAvatar({ title }: { title?: string | null }) {\n  const displayTitle = title || \"Thread\";\n  const initials = displayTitle\n    .split(\" \")\n    .filter(Boolean)\n    .map((word) => word[0]?.toUpperCase())\n    .join(\"\")\n    .slice(0, 2);\n\n  return (\n    <div className=\"flex size-6 items-center justify-center rounded-md border border-sidebar-border bg-sidebar-accent/40 font-semibold text-[11px] text-sidebar-foreground uppercase\">\n      {initials || \"AI\"}\n    </div>\n  );\n}\n\nfunction MoreOptions({\n  threadTitle,\n  onRename,\n  onDelete,\n}: {\n  threadTitle: string;\n  onRename: (title: string) => void;\n  onDelete: () => void;\n}) {\n  const handleRename = () => {\n    const newTitle = window.prompt(\"Enter new thread title:\", threadTitle);\n    if (newTitle?.trim() && newTitle !== threadTitle) {\n      onRename(newTitle.trim());\n    }\n  };\n\n  const handleDelete = () => {\n    if (window.confirm(`Are you sure you want to delete \"${threadTitle}\"?`)) {\n      onDelete();\n    }\n  };\n\n  return (\n    <DropdownMenu>\n      <Tooltip>\n        <DropdownMenuTrigger\n          render={\n            <TooltipTrigger\n              render={\n                <div className=\"flex size-5 cursor-pointer items-center justify-center rounded-md hover:bg-gray-200\">\n                  <DotsThreeIcon className=\"size-4\" />\n                </div>\n              }\n            />\n          }\n        />\n        <TooltipContent>\n          <span>More options</span>\n        </TooltipContent>\n      </Tooltip>\n\n      <DropdownMenuPositioner>\n        <DropdownMenuContent>\n          <DropdownMenuItem onClick={handleRename}>\n            <PencilSimpleIcon weight=\"duotone\" className=\"size-4.5\" />{\" \"}\n            <span>Rename</span>\n          </DropdownMenuItem>\n          <DropdownMenuItem onClick={handleDelete}>\n            <TrashIcon\n              weight=\"duotone\"\n              className=\"size-4.5 text-destructive\"\n              color=\"currentColor\"\n            />{\" \"}\n            <span className=\"text-destructive\">Delete</span>\n          </DropdownMenuItem>\n        </DropdownMenuContent>\n      </DropdownMenuPositioner>\n    </DropdownMenu>\n  );\n}\n",
      "type": "registry:component",
      "target": "components/agent/sidebar/sidebar.tsx"
    },
    {
      "path": "src/registry/agentstart/sidebar/sidebar-item.tsx",
      "content": "/* agent-frontmatter:start\nAGENT: Sidebar item\nPURPOSE: Render a single thread row inside the agent sidebar\nUSAGE: <SidebarItem thread={thread} onSelect={handleSelect} />\nEXPORTS: SidebarItem, SidebarItemProps\nFEATURES:\n  - Displays title, timestamp, and optional leading/trailing content\n  - Supports active and disabled states for navigation\n  - Computes human-readable relative timestamps by default\nSEARCHABLE: agent layout, list item, sidebar row\nagent-frontmatter:end */\n\n\"use client\";\n\nimport { formatRelativeFromNow } from \"@agentstart/utils\";\nimport type { DBThread } from \"agentstart/db\";\nimport type { ReactNode } from \"react\";\nimport { memo, useMemo } from \"react\";\nimport { SidebarMenuButton, SidebarMenuItem } from \"@/components/ui/sidebar\";\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\";\n\nexport type SidebarItemProps = {\n  thread: DBThread;\n  leading?: ReactNode;\n  trailing?: ReactNode;\n  secondaryText?: ReactNode;\n  isActive?: boolean;\n  disabled?: boolean;\n  className?: string;\n  onSelect?: (thread: DBThread) => void;\n};\n\nexport const SidebarItem = memo(function SidebarItem({\n  thread,\n  leading,\n  trailing,\n  secondaryText,\n  isActive = false,\n  disabled = false,\n  className,\n  onSelect,\n}: SidebarItemProps) {\n  const computedSecondaryText = useMemo(() => {\n    if (secondaryText === null) {\n      return null;\n    }\n    if (secondaryText !== undefined) {\n      return secondaryText;\n    }\n    return formatRelativeFromNow(thread.updatedAt ?? thread.createdAt);\n  }, [secondaryText, thread.createdAt, thread.updatedAt]);\n\n  return (\n    <SidebarMenuItem className={className}>\n      <SidebarMenuButton\n        type=\"button\"\n        isActive={isActive}\n        disabled={disabled}\n        onClick={() => {\n          if (!disabled) {\n            onSelect?.(thread);\n          }\n        }}\n        className=\"group/sidebar-item cursor-pointer\"\n      >\n        <div className=\"flex w-full items-center gap-3 overflow-hidden\">\n          {leading && <div className=\"shrink-0\">{leading}</div>}\n          <Tooltip>\n            <TooltipTrigger\n              render={\n                <span className=\"flex-1 truncate font-medium text-sm\">\n                  {thread.title || \"Untitled thread\"}\n                </span>\n              }\n            />\n            {computedSecondaryText && (\n              <TooltipContent>\n                <span className=\"space-x-1\">\n                  <span>{thread.title || \"Untitled thread\"}</span>\n                  <span className=\"text-[10px] text-muted-foreground\">\n                    {computedSecondaryText}\n                  </span>\n                </span>\n              </TooltipContent>\n            )}\n          </Tooltip>\n          {trailing && (\n            <div className=\"invisible shrink-0 group-hover/sidebar-item:visible\">\n              {trailing}\n            </div>\n          )}\n        </div>\n      </SidebarMenuButton>\n    </SidebarMenuItem>\n  );\n});\n",
      "type": "registry:component",
      "target": "components/agent/sidebar/sidebar-item.tsx"
    }
  ]
}
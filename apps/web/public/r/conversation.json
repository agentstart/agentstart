{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "conversation",
  "type": "registry:component",
  "title": "AgentStart Conversation",
  "description": "Render thread messages with auto-scroll and tool-aware formatting. Loads thread transcripts with TanStack Query and displays AI responses and tool interactions.",
  "dependencies": [
    "@phosphor-icons/react",
    "@tanstack/react-query",
    "agentstart",
    "react"
  ],
  "registryDependencies": [
    "spinner",
    "@coss/button",
    "@coss/empty",
    "@coss/provider",
    "shimmer",
    "suggested-prompts",
    "message-part-view"
  ],
  "files": [
    {
      "path": "src/registry/agentstart/conversation.tsx",
      "content": "/* agent-frontmatter:start\nAGENT: Agent conversation viewer\nPURPOSE: Render thread messages with auto-scroll and tool-aware formatting\nUSAGE: <Conversation threadId={threadId} />\nEXPORTS: Conversation, ConversationProps, ConversationContent, ConversationEmptyState, ConversationScrollButton\nFEATURES:\n  - Loads thread transcripts with TanStack Query and the AgentStart client\n  - Displays AI responses and tool interactions with timeline styling\n  - Keeps the conversation pinned to the latest message with scroll controls\nSEARCHABLE: conversation viewer, thread messages, agentstart conversation, auto scroll\nagent-frontmatter:end */\n\n\"use client\";\n\nimport {\n  ArrowsClockwiseIcon,\n  CaretDownIcon,\n  ChatSlashIcon,\n  CheckIcon,\n  CopyIcon,\n} from \"@phosphor-icons/react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport type { AgentStartUIMessage } from \"agentstart/agent\";\nimport { type AgentStore, useAgentStore } from \"agentstart/client\";\nimport { format, formatDistanceToNow } from \"date-fns\";\nimport type { ComponentProps, ReactNode } from \"react\";\nimport { useCallback, useEffect, useMemo, useRef, useState } from \"react\";\nimport { StickToBottom, useStickToBottomContext } from \"use-stick-to-bottom\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Empty,\n  EmptyContent,\n  EmptyDescription,\n  EmptyHeader,\n  EmptyTitle,\n} from \"@/components/ui/empty\";\nimport { Spinner } from \"@/components/ui/spinner\";\nimport { Tooltip, TooltipPopup, TooltipTrigger } from \"@/components/ui/tooltip\";\nimport { cn } from \"@/lib/utils\";\nimport { Message, MessageContent } from \"./message\";\nimport { useAgentStartContext } from \"./provider\";\nimport { Response } from \"./response\";\nimport { StatusIndicators } from \"./shimmer\";\nimport { Source, Sources, SourcesContent, SourcesTrigger } from \"./sources\";\nimport { SuggestedPrompts } from \"./suggested-prompts\";\nimport { MessagePart } from \"./tools/message-part-view\";\n\n// Helper types\ntype MessagePartType = NonNullable<AgentStartUIMessage[\"parts\"]>[number];\ntype TextPart = MessagePartType & { type: \"text\"; text: string };\ntype ImagePart = MessagePartType & {\n  type: \"file\";\n  url: string;\n  mediaType: string;\n  filename?: string;\n};\n\n// Type guards\nconst isTextPart = (part: MessagePartType): part is TextPart =>\n  part?.type === \"text\" &&\n  typeof part.text === \"string\" &&\n  part.text.length > 0;\n\nconst isImagePart = (part: MessagePartType): part is ImagePart =>\n  part?.type === \"file\" &&\n  typeof (part as { mediaType?: unknown }).mediaType === \"string\" &&\n  ((part as { mediaType?: string }).mediaType?.startsWith(\"image/\") ?? false) &&\n  typeof (part as { url?: unknown }).url === \"string\" &&\n  ((part as { url?: string }).url?.length ?? 0) > 0;\n\n// Helper functions\nconst getFileCount = (files: unknown): number => {\n  if (files instanceof FileList) return files.length;\n  if (Array.isArray(files)) return files.length;\n  return 0;\n};\n\nconst hasNewThreadDraftContent = (draft: unknown): boolean => {\n  if (!draft || typeof draft !== \"object\") return false;\n  const d = draft as { text?: string; files?: unknown };\n  const hasText = (d.text?.trim() ?? \"\").length > 0;\n  const fileCount = getFileCount(d.files);\n  return hasText || fileCount > 0;\n};\n\nconst copyMessageText = (message: AgentStartUIMessage): void => {\n  const parts = message.parts ?? [];\n  if (parts.length === 0) return;\n  const text = parts.find((part) => part.type === \"text\")?.text ?? \"\";\n  if (!text) return;\n  void navigator.clipboard.writeText(text);\n};\n\ntype RelativeTimeProps = {\n  timestamp?: number | Date;\n};\n\nconst RelativeTime = ({ timestamp }: RelativeTimeProps) => {\n  const [relativeTime, setRelativeTime] = useState<string>(\"\");\n  const absoluteTime = useMemo(\n    () =>\n      timestamp\n        ? format(timestamp, \"M/d/yyyy, h:mm a\") // 10/28/2025, 12:04 PM\n        : null,\n    [timestamp],\n  );\n\n  useEffect(() => {\n    if (!timestamp) {\n      setRelativeTime(\"\");\n      return;\n    }\n\n    const updateRelativeTime = () => {\n      setRelativeTime(\n        formatDistanceToNow(new Date(timestamp), { addSuffix: true }),\n      );\n    };\n\n    updateRelativeTime();\n    const interval = setInterval(updateRelativeTime, 60000); // Update every minute\n\n    return () => clearInterval(interval);\n  }, [timestamp]);\n\n  if (!timestamp || !relativeTime) {\n    return null;\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger className=\"cursor-default text-muted-foreground text-xs\">\n        {relativeTime}\n      </TooltipTrigger>\n      <TooltipPopup>\n        <p className=\"text-xs\">{absoluteTime}</p>\n      </TooltipPopup>\n    </Tooltip>\n  );\n};\n\nexport type ConversationProps = Omit<\n  ComponentProps<typeof StickToBottom>,\n  \"children\"\n> & {\n  contentClassName?: string;\n  /**\n   * Thread identifier to hydrate the conversation.\n   */\n  threadId?: string;\n  /**\n   * Optional messages used to hydrate the UI before the client store syncs.\n   */\n  initialMessages?: AgentStartUIMessage[];\n  /**\n   * Custom empty state element when no messages are present.\n   */\n  emptyState?: ReactNode;\n  /**\n   * Custom loading state element while fetching the thread history.\n   */\n  loadingState?: ReactNode;\n  /**\n   * Provide a custom error renderer when fetching messages fails.\n   */\n  errorState?: (error: Error, retry: () => void) => ReactNode;\n};\n\nexport type ConversationEmptyStateProps = ComponentProps<\"div\"> & {\n  title?: string;\n  description?: string;\n  icon?: ReactNode;\n};\n\nexport const ConversationEmptyState = ({\n  className,\n  title = \"No messages yet\",\n  description = \"Start a conversation to see messages here\",\n  icon,\n  children,\n  ...props\n}: ConversationEmptyStateProps) => (\n  <div\n    className={cn(\n      \"flex size-full flex-col items-center justify-center gap-3 p-8 text-center\",\n      className,\n    )}\n    {...props}\n  >\n    {children ?? (\n      <>\n        {icon && <div className=\"text-muted-foreground\">{icon}</div>}\n        <div className=\"space-y-1\">\n          <h3 className=\"font-medium text-sm\">{title}</h3>\n          {description && (\n            <p className=\"text-muted-foreground text-sm\">{description}</p>\n          )}\n        </div>\n      </>\n    )}\n  </div>\n);\n\ntype CopyButtonProps = Omit<\n  ComponentProps<typeof Button>,\n  \"onClick\" | \"children\"\n> & {\n  onCopy: () => void;\n  feedbackDuration?: number;\n};\n\nconst CopyButton = ({\n  onCopy,\n  feedbackDuration = 3000,\n  disabled,\n  ...props\n}: CopyButtonProps) => {\n  const [isCopied, setIsCopied] = useState(false);\n  const timeoutRef = useRef<NodeJS.Timeout | null>(null);\n\n  useEffect(() => {\n    return () => {\n      if (timeoutRef.current) {\n        clearTimeout(timeoutRef.current);\n      }\n    };\n  }, []);\n\n  const handleClick = () => {\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n\n    onCopy();\n    setIsCopied(true);\n\n    timeoutRef.current = setTimeout(() => {\n      setIsCopied(false);\n      timeoutRef.current = null;\n    }, feedbackDuration);\n  };\n\n  return (\n    <Button onClick={handleClick} disabled={disabled || isCopied} {...props}>\n      {isCopied ? (\n        <CheckIcon className=\"size-4\" weight=\"duotone\" />\n      ) : (\n        <CopyIcon className=\"size-4\" weight=\"duotone\" />\n      )}\n      <span className=\"sr-only\">{isCopied ? \"Copied\" : \"Copy\"}</span>\n    </Button>\n  );\n};\n\nexport type ConversationScrollButtonProps = ComponentProps<typeof Button>;\n\nexport const ConversationScrollButton = ({\n  className,\n  ...props\n}: ConversationScrollButtonProps) => {\n  const { isAtBottom, scrollToBottom } = useStickToBottomContext();\n\n  if (isAtBottom) {\n    return null;\n  }\n\n  return (\n    <Button\n      className={cn(\n        \"absolute bottom-4 left-[50%] translate-x-[-50%] rounded-full\",\n        className,\n      )}\n      onClick={() => scrollToBottom()}\n      size=\"icon\"\n      type=\"button\"\n      variant=\"outline\"\n      {...props}\n    >\n      <CaretDownIcon className=\"size-4\" weight=\"duotone\" />\n    </Button>\n  );\n};\n\ntype UIAgentStore = AgentStore<AgentStartUIMessage>;\n\nexport function Conversation({\n  threadId,\n  className,\n  contentClassName,\n  emptyState,\n  loadingState,\n  errorState,\n  initialMessages,\n  ...props\n}: ConversationProps) {\n  const { orpc } = useAgentStartContext();\n\n  const resolvedStoreId = threadId ?? \"default\";\n\n  const messages = useAgentStore<AgentStartUIMessage, AgentStartUIMessage[]>(\n    (state) => state.messages,\n    resolvedStoreId,\n  );\n  const status = useAgentStore<AgentStartUIMessage, UIAgentStore[\"status\"]>(\n    (state) => state.status,\n    resolvedStoreId,\n  );\n  const storeError = useAgentStore<AgentStartUIMessage, UIAgentStore[\"error\"]>(\n    (state) => state.error,\n    resolvedStoreId,\n  );\n  const setMessages = useAgentStore<\n    AgentStartUIMessage,\n    UIAgentStore[\"setMessages\"]\n  >((state) => state.setMessages, resolvedStoreId);\n  const regenerate = useAgentStore<\n    AgentStartUIMessage,\n    UIAgentStore[\"regenerate\"]\n  >((state) => state.regenerate, resolvedStoreId);\n  const newThreadDraft = useAgentStore<\n    AgentStartUIMessage,\n    UIAgentStore[\"newThreadDraft\"]\n  >((state) => state.newThreadDraft);\n  const messageQueue = useAgentStore<\n    AgentStartUIMessage,\n    UIAgentStore[\"messageQueue\"]\n  >((state) => state.messageQueue);\n  const hasQueue = messageQueue.length > 0;\n  const hasNewThreadDraft = hasNewThreadDraftContent(newThreadDraft);\n\n  const queryResult = useQuery(\n    orpc.message.get.queryOptions({\n      input: { threadId: threadId! },\n      enabled: Boolean(threadId) && !hasNewThreadDraft,\n      initialData: threadId ? initialMessages : undefined,\n    }),\n  );\n\n  const {\n    data: fetchedMessages,\n    error: queryError,\n    isError,\n    isLoading,\n    isFetching,\n    refetch,\n  } = queryResult;\n\n  useEffect(() => {\n    // If no threadId is provided, clear messages\n    if (!threadId) {\n      if (messages.length > 0) {\n        setMessages([]);\n      }\n      return;\n    }\n\n    // If no messages were fetched, do nothing\n    if (!fetchedMessages?.length) {\n      return;\n    }\n\n    // If there are already messages in the store, do nothing\n    if (messages.length > 0) {\n      return;\n    }\n\n    // Set the fetched messages into the store\n    setMessages(fetchedMessages);\n  }, [fetchedMessages, messages, setMessages, threadId]);\n\n  const renderAssistantMessage = useCallback(\n    (message: AgentStartUIMessage, isLastMessage: boolean) => {\n      const parts = message.parts ?? [];\n\n      return parts.map((part, index) => (\n        <MessagePart\n          key={`${message.id}-tool-${index}`}\n          part={part}\n          isStreaming={\n            isLastMessage &&\n            status === \"streaming\" &&\n            index === parts.length - 1\n          }\n        />\n      ));\n    },\n    [status],\n  );\n\n  const renderUserMessage = useCallback((message: AgentStartUIMessage) => {\n    const parts = (message.parts ?? []) as MessagePartType[];\n    const textParts = parts.filter(isTextPart);\n    const imageParts = parts.filter(isImagePart);\n\n    if (textParts.length === 0 && imageParts.length === 0) {\n      return null;\n    }\n\n    return (\n      <div className=\"flex w-full flex-col gap-2\">\n        {imageParts.length > 0 ? (\n          <div\n            className={cn(\n              \"grid gap-2\",\n              imageParts.length === 1 ? \"grid-cols-1\" : \"grid-cols-2\",\n            )}\n          >\n            {imageParts.map((part, index) => (\n              <figure\n                key={`${message.id}-image-${index}`}\n                className=\"relative overflow-hidden rounded-md border bg-muted\"\n              >\n                <img\n                  alt={part.filename || `Attachment ${index + 1}`}\n                  className=\"h-full max-h-60 w-full object-cover\"\n                  loading=\"lazy\"\n                  src={part.url}\n                />\n                {part.filename ? (\n                  <figcaption className=\"sr-only\">{part.filename}</figcaption>\n                ) : null}\n              </figure>\n            ))}\n          </div>\n        ) : null}\n\n        {textParts.map((part, index) => (\n          <Response key={`${message.id}-text-${index}`}>{part.text}</Response>\n        ))}\n      </div>\n    );\n  }, []);\n\n  const renderUserActions = (message: AgentStartUIMessage) => (\n    <div className=\"flex items-center gap-1 opacity-0 group-hover:opacity-100\">\n      <CopyButton\n        className=\"size-7\"\n        size=\"icon-sm\"\n        variant=\"ghost\"\n        onCopy={() => copyMessageText(message)}\n      />\n\n      <RelativeTime timestamp={message.metadata?.createdAt} />\n    </div>\n  );\n\n  const renderAssistantActions = (message: AgentStartUIMessage) => {\n    const parts = message.parts ?? [];\n    const sourceParts = parts.filter((part) => part.type === \"source-url\");\n\n    return (\n      <>\n        <div className=\"mt-2 flex w-full items-center justify-start gap-1 opacity-0 group-hover:opacity-100\">\n          <Button\n            className=\"size-7\"\n            size=\"icon-sm\"\n            variant=\"ghost\"\n            onClick={() =>\n              regenerate({\n                body: {\n                  threadId,\n                },\n              })\n            }\n          >\n            <ArrowsClockwiseIcon className=\"size-4\" weight=\"duotone\" />\n            <span className=\"sr-only\">Retry</span>\n          </Button>\n\n          <CopyButton\n            className=\"size-7\"\n            size=\"icon-sm\"\n            variant=\"ghost\"\n            onCopy={() => copyMessageText(message)}\n          />\n\n          <RelativeTime timestamp={message.metadata?.createdAt} />\n        </div>\n\n        {sourceParts.length > 0 && (\n          <div className=\"mt-2 w-full\">\n            <Sources>\n              <SourcesTrigger count={sourceParts.length} />\n              <SourcesContent>\n                {sourceParts.map((part, index) => {\n                  const sourcePart = part as {\n                    url: string;\n                    title?: string;\n                  };\n                  return (\n                    <Source\n                      key={`${message.id}-source-${index}`}\n                      href={sourcePart.url}\n                      title={sourcePart.title || sourcePart.url}\n                    />\n                  );\n                })}\n              </SourcesContent>\n            </Sources>\n          </div>\n        )}\n      </>\n    );\n  };\n\n  const fetchError = isError ? (queryError as Error) : null;\n  const hasMessages = messages.length > 0;\n  const showInitialLoading =\n    Boolean(threadId) &&\n    !hasMessages &&\n    (hasNewThreadDraft || isLoading || (isFetching && !fetchedMessages));\n\n  const defaultEmptyState = (\n    <ConversationEmptyState\n      icon={\n        <ChatSlashIcon\n          className=\"size-12 text-muted-foreground\"\n          weight=\"duotone\"\n        />\n      }\n      title=\"Start a conversation\"\n      description=\"Send a message to begin chatting with the agent.\"\n    />\n  );\n\n  const defaultLoadingState = (\n    <ConversationEmptyState\n      icon={<Spinner className=\"text-muted-foreground\" />}\n      title=\"Loading conversation\"\n      description=\"Fetching the latest messages…\"\n    />\n  );\n\n  const defaultErrorState = fetchError && (\n    <ConversationEmptyState\n      icon={\n        <ChatSlashIcon className=\"size-12 text-destructive\" weight=\"duotone\" />\n      }\n      title=\"Unable to load messages\"\n      description={fetchError.message ?? \"Please try again.\"}\n    >\n      <Button onClick={() => refetch()} type=\"button\" variant=\"outline\">\n        Retry\n      </Button>\n    </ConversationEmptyState>\n  );\n\n  const resolvedEmptyState = emptyState ?? defaultEmptyState;\n  const resolvedLoadingState = loadingState ?? defaultLoadingState;\n  const resolvedErrorState = fetchError\n    ? (errorState?.(fetchError, () => refetch()) ?? defaultErrorState)\n    : null;\n  const shouldShowStatusIndicators =\n    status === \"streaming\" || status === \"submitted\";\n\n  return (\n    <StickToBottom\n      className={cn(\"relative flex size-full flex-col\", className)}\n      initial=\"smooth\"\n      resize=\"smooth\"\n      role=\"log\"\n      {...props}\n    >\n      <StickToBottom.Content\n        className={cn(\n          \"mx-auto flex flex-1 flex-col gap-4 p-0 sm:min-w-[390px] sm:max-w-3xl\",\n          contentClassName,\n        )}\n      >\n        {resolvedErrorState ? (\n          resolvedErrorState\n        ) : hasMessages ? (\n          <div className=\"flex flex-col gap-4\">\n            {messages.map((message, index) => {\n              if (message.role === \"system\") {\n                return null;\n              }\n\n              const isLastMessage = index === messages.length - 1;\n              return (\n                <Message\n                  from={message.role}\n                  key={message.id}\n                  className={cn(\"flex-col\", {\n                    \"items-start\": message.role === \"assistant\",\n                    \"items-end\": message.role === \"user\",\n                  })}\n                >\n                  {message.role === \"user\" && renderUserActions(message)}\n\n                  <MessageContent\n                    className={cn({\n                      \"space-y-3\": message.role === \"assistant\",\n                      \"text-base ltr:rounded-br-none rtl:rounded-bl-none\":\n                        message.role === \"user\",\n                    })}\n                    variant={\n                      message.role === \"assistant\" ? \"flat\" : \"contained\"\n                    }\n                  >\n                    {message.role === \"assistant\"\n                      ? renderAssistantMessage(message, isLastMessage)\n                      : renderUserMessage(message)}\n                  </MessageContent>\n\n                  {message.role === \"assistant\" &&\n                  [\"ready\", \"error\"].includes(status)\n                    ? renderAssistantActions(message)\n                    : null}\n                </Message>\n              );\n            })}\n            {shouldShowStatusIndicators && <StatusIndicators />}\n            {storeError && (\n              <Empty>\n                <EmptyHeader>\n                  <EmptyTitle className=\"text-destructive\">\n                    Error Occurred\n                  </EmptyTitle>\n                  <EmptyDescription className=\"overflow-hidden sm:min-w-[390px] sm:max-w-3xl\">\n                    {storeError.message ?? \"Unexpected error\"}\n                  </EmptyDescription>\n                </EmptyHeader>\n                <EmptyContent>\n                  <Button variant=\"outline\" size=\"sm\">\n                    <ArrowsClockwiseIcon className=\"size-4\" weight=\"duotone\" />\n                    Retry\n                  </Button>\n                </EmptyContent>\n              </Empty>\n            )}\n          </div>\n        ) : showInitialLoading ? (\n          resolvedLoadingState\n        ) : (\n          resolvedEmptyState\n        )}\n\n        <SuggestedPrompts\n          threadId={threadId}\n          className={cn({\n            \"pt-0\": !hasMessages,\n          })}\n        />\n      </StickToBottom.Content>\n\n      <ConversationScrollButton\n        className={cn(\"bottom-42\", {\n          \"bottom-52\": hasQueue,\n        })}\n      />\n    </StickToBottom>\n  );\n}\n",
      "type": "registry:component",
      "target": "components/agent/conversation.tsx"
    }
  ]
}